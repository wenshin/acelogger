/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./demo/demo.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./demo/demo.ts":
/*!**********************!*\
  !*** ./demo/demo.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src */ \"./src/index.ts\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/src/index.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__);\n\n\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].setTracer(new _src__WEBPACK_IMPORTED_MODULE_0__[\"Tracer\"]({\n  name: 'demo.app',\n  version: '0.0.1'\n})); // init logger exporter\n\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.setExporter(_src__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Debug, new _src__WEBPACK_IMPORTED_MODULE_0__[\"ConsoleExporterWeb\"]());\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.setBufferSize(0);\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.debug('test debug');\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.info('test info');\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.warn('test warn');\n_src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.error(new Error('test error'));\nvar spanLogger = _src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].logger.startSpan('first.span', {\n  parent: _src__WEBPACK_IMPORTED_MODULE_0__[\"api\"].tracer.createSpanContext()\n});\nsetTimeout(function () {\n  spanLogger.debug('test span debug');\n  spanLogger.info('test span info');\n  spanLogger.warn('test span warn');\n  spanLogger.error(new Error('test span error'));\n  spanLogger.endSpan();\n}, 2000); // create sub span\n\nvar span1 = spanLogger.startSpan('first_child.span');\nsetTimeout(function () {\n  span1.debug('test span debug');\n  span1.info('test span info');\n  span1.warn('test span warn');\n  span1.error(new Error('test span error'));\n  span1.endSpan({\n    status: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__[\"CanonicalCode\"].UNKNOWN\n  });\n}, 4000);\n\n//# sourceURL=webpack:///./demo/demo.ts?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/context.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ \"./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/index.js\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nclass ContextAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() {\n        this._contextManager = new context_base_1.NoopContextManager();\n    }\n    /** Get the singleton instance of the Context API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current context manager. Returns the initialized context manager\n     */\n    setGlobalContextManager(contextManager) {\n        this._contextManager = contextManager;\n        return contextManager;\n    }\n    /**\n     * Get the currently active context\n     */\n    active() {\n        return this._contextManager.active();\n    }\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     */\n    with(context, fn) {\n        return this._contextManager.with(context, fn);\n    }\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param target function or event emitter to bind\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     */\n    bind(target, context = this.active()) {\n        return this._contextManager.bind(target, context);\n    }\n}\nexports.ContextAPI = ContextAPI;\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/api/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/metrics.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NoopMeterProvider_1 = __webpack_require__(/*! ../metrics/NoopMeterProvider */ \"./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nclass MetricsAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() {\n        this._meterProvider = NoopMeterProvider_1.NOOP_METER_PROVIDER;\n    }\n    /** Get the singleton instance of the Metrics API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current global meter. Returns the initialized global meter provider.\n     */\n    setGlobalMeterProvider(provider) {\n        this._meterProvider = provider;\n        return provider;\n    }\n    /**\n     * Returns the global meter provider.\n     */\n    getMeterProvider() {\n        return this._meterProvider;\n    }\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    getMeter(name, version) {\n        return this.getMeterProvider().getMeter(name, version);\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=metrics.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/api/metrics.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/propagation.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getter_1 = __webpack_require__(/*! ../context/propagation/getter */ \"./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js\");\nconst NoopHttpTextPropagator_1 = __webpack_require__(/*! ../context/propagation/NoopHttpTextPropagator */ \"./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js\");\nconst setter_1 = __webpack_require__(/*! ../context/propagation/setter */ \"./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js\");\nconst context_1 = __webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/api/build/src/api/context.js\");\nconst contextApi = context_1.ContextAPI.getInstance();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nclass PropagationAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() {\n        this._propagator = NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR;\n    }\n    /** Get the singleton instance of the Propagator API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current propagator. Returns the initialized propagator\n     */\n    setGlobalPropagator(propagator) {\n        this._propagator = propagator;\n        return propagator;\n    }\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     * @param context Context carrying tracing data to inject. Defaults to the currently active context.\n     */\n    inject(carrier, setter = setter_1.defaultSetter, context = contextApi.active()) {\n        return this._propagator.inject(context, carrier, setter);\n    }\n    /**\n     * Extract context from a carrier\n     *\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     * @param context Context which the newly created context will inherit from. Defaults to the currently active context.\n     */\n    extract(carrier, getter = getter_1.defaultGetter, context = contextApi.active()) {\n        return this._propagator.extract(context, carrier, getter);\n    }\n}\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/api/propagation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/trace.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NoopTracerProvider_1 = __webpack_require__(/*! ../trace/NoopTracerProvider */ \"./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nclass TraceAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() {\n        this._tracerProvider = NoopTracerProvider_1.NOOP_TRACER_PROVIDER;\n    }\n    /** Get the singleton instance of the Trace API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current global tracer. Returns the initialized global tracer provider\n     */\n    setGlobalTracerProvider(provider) {\n        this._tracerProvider = provider;\n        return provider;\n    }\n    /**\n     * Returns the global tracer provider.\n     */\n    getTracerProvider() {\n        return this._tracerProvider;\n    }\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    getTracer(name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    }\n}\nexports.TraceAPI = TraceAPI;\n//# sourceMappingURL=trace.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/api/trace.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * No-op implementations of {@link HttpTextPropagator}.\n */\nclass NoopHttpTextPropagator {\n    /** Noop inject function does nothing */\n    inject(context, carrier, setter) { }\n    /** Noop extract function does nothing and returns the input context */\n    extract(context, carrier, getter) {\n        return context;\n    }\n}\nexports.NoopHttpTextPropagator = NoopHttpTextPropagator;\nexports.NOOP_HTTP_TEXT_PROPAGATOR = new NoopHttpTextPropagator();\n//# sourceMappingURL=NoopHttpTextPropagator.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Default getter which just does a simple property access. Returns\n * undefined if the key is not set.\n *\n * @param carrier\n * @param key\n */\nfunction defaultGetter(carrier, key) {\n    return carrier[key];\n}\nexports.defaultGetter = defaultGetter;\n//# sourceMappingURL=getter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Default setter which sets value via direct property access\n *\n * @param carrier\n * @param key\n */\nfunction defaultSetter(carrier, key, value) {\n    carrier[key] = value;\n}\nexports.defaultSetter = defaultSetter;\n//# sourceMappingURL=setter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * EntryTtl is an integer that represents number of hops an entry can propagate.\n *\n * For now, ONLY special values (0 and -1) are supported.\n */\nvar EntryTtl;\n(function (EntryTtl) {\n    /**\n     * NO_PROPAGATION is considered to have local context and is used within the\n     * process it created.\n     */\n    EntryTtl[EntryTtl[\"NO_PROPAGATION\"] = 0] = \"NO_PROPAGATION\";\n    /** UNLIMITED_PROPAGATION can propagate unlimited hops. */\n    EntryTtl[EntryTtl[\"UNLIMITED_PROPAGATION\"] = -1] = \"UNLIMITED_PROPAGATION\";\n})(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));\n//# sourceMappingURL=EntryValue.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./context/propagation/getter */ \"./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js\"));\n__export(__webpack_require__(/*! ./context/propagation/NoopHttpTextPropagator */ \"./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js\"));\n__export(__webpack_require__(/*! ./context/propagation/setter */ \"./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js\"));\n__export(__webpack_require__(/*! ./correlation_context/EntryValue */ \"./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js\"));\n__export(__webpack_require__(/*! ./metrics/Metric */ \"./node_modules/@opentelemetry/api/build/src/metrics/Metric.js\"));\n__export(__webpack_require__(/*! ./metrics/NoopMeter */ \"./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js\"));\n__export(__webpack_require__(/*! ./metrics/NoopMeterProvider */ \"./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js\"));\n__export(__webpack_require__(/*! ./trace/NoopSpan */ \"./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js\"));\n__export(__webpack_require__(/*! ./trace/NoopTracer */ \"./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js\"));\n__export(__webpack_require__(/*! ./trace/NoopTracerProvider */ \"./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js\"));\n__export(__webpack_require__(/*! ./trace/span_kind */ \"./node_modules/@opentelemetry/api/build/src/trace/span_kind.js\"));\n__export(__webpack_require__(/*! ./trace/status */ \"./node_modules/@opentelemetry/api/build/src/trace/status.js\"));\n__export(__webpack_require__(/*! ./trace/trace_flags */ \"./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js\"));\nvar context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ \"./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/index.js\");\nexports.Context = context_base_1.Context;\nconst context_1 = __webpack_require__(/*! ./api/context */ \"./node_modules/@opentelemetry/api/build/src/api/context.js\");\n/** Entrypoint for context API */\nexports.context = context_1.ContextAPI.getInstance();\nconst trace_1 = __webpack_require__(/*! ./api/trace */ \"./node_modules/@opentelemetry/api/build/src/api/trace.js\");\n/** Entrypoint for trace API */\nexports.trace = trace_1.TraceAPI.getInstance();\nconst metrics_1 = __webpack_require__(/*! ./api/metrics */ \"./node_modules/@opentelemetry/api/build/src/api/metrics.js\");\n/** Entrypoint for metrics API */\nexports.metrics = metrics_1.MetricsAPI.getInstance();\nconst propagation_1 = __webpack_require__(/*! ./api/propagation */ \"./node_modules/@opentelemetry/api/build/src/api/propagation.js\");\n/** Entrypoint for propagation API */\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nexports.default = {\n    trace: exports.trace,\n    metrics: exports.metrics,\n    context: exports.context,\n    propagation: exports.propagation,\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/metrics/Metric.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/metrics/Metric.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType = exports.ValueType || (exports.ValueType = {}));\n//# sourceMappingURL=Metric.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/metrics/Metric.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nclass NoopMeter {\n    constructor() { }\n    /**\n     * Returns constant noop measure.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    createMeasure(name, options) {\n        return exports.NOOP_MEASURE_METRIC;\n    }\n    /**\n     * Returns a constant noop counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    createCounter(name, options) {\n        return exports.NOOP_COUNTER_METRIC;\n    }\n    /**\n     * Returns constant noop observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    createObserver(name, options) {\n        return exports.NOOP_OBSERVER_METRIC;\n    }\n}\nexports.NoopMeter = NoopMeter;\nclass NoopMetric {\n    constructor(instrument) {\n        this._instrument = instrument;\n    }\n    /**\n     * Returns a Bound Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Bound Instrument instead of\n     * always calling this method for every operations.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    bind(labels) {\n        return this._instrument;\n    }\n    /**\n     * Removes the Binding from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    unbind(labels) {\n        return;\n    }\n    /**\n     * Clears all timeseries from the Metric.\n     */\n    clear() {\n        return;\n    }\n}\nexports.NoopMetric = NoopMetric;\nclass NoopCounterMetric extends NoopMetric {\n    add(value, labels) {\n        this.bind(labels).add(value);\n    }\n}\nexports.NoopCounterMetric = NoopCounterMetric;\nclass NoopMeasureMetric extends NoopMetric {\n    record(value, labels, correlationContext, spanContext) {\n        if (typeof correlationContext === 'undefined') {\n            this.bind(labels).record(value);\n        }\n        else if (typeof spanContext === 'undefined') {\n            this.bind(labels).record(value, correlationContext);\n        }\n        else {\n            this.bind(labels).record(value, correlationContext, spanContext);\n        }\n    }\n}\nexports.NoopMeasureMetric = NoopMeasureMetric;\nclass NoopObserverMetric extends NoopMetric {\n    setCallback(callback) { }\n}\nexports.NoopObserverMetric = NoopObserverMetric;\nclass NoopBoundCounter {\n    add(value) {\n        return;\n    }\n}\nexports.NoopBoundCounter = NoopBoundCounter;\nclass NoopBoundMeasure {\n    record(value, correlationContext, spanContext) {\n        return;\n    }\n}\nexports.NoopBoundMeasure = NoopBoundMeasure;\nclass NoopBoundObserver {\n    setCallback(callback) { }\n}\nexports.NoopBoundObserver = NoopBoundObserver;\nexports.NOOP_METER = new NoopMeter();\nexports.NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);\nexports.NOOP_BOUND_MEASURE = new NoopBoundMeasure();\nexports.NOOP_MEASURE_METRIC = new NoopMeasureMetric(exports.NOOP_BOUND_MEASURE);\nexports.NOOP_BOUND_OBSERVER = new NoopBoundObserver();\nexports.NOOP_OBSERVER_METRIC = new NoopObserverMetric(exports.NOOP_BOUND_OBSERVER);\n//# sourceMappingURL=NoopMeter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NoopMeter_1 = __webpack_require__(/*! ./NoopMeter */ \"./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js\");\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nclass NoopMeterProvider {\n    getMeter(_name, _version) {\n        return NoopMeter_1.NOOP_METER;\n    }\n}\nexports.NoopMeterProvider = NoopMeterProvider;\nexports.NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst trace_flags_1 = __webpack_require__(/*! ./trace_flags */ \"./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js\");\nexports.INVALID_TRACE_ID = '0';\nexports.INVALID_SPAN_ID = '0';\nconst INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACE_ID,\n    spanId: exports.INVALID_SPAN_ID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nclass NoopSpan {\n    constructor(_spanContext = INVALID_SPAN_CONTEXT) {\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    context() {\n        return this._spanContext;\n    }\n    // By default does nothing\n    setAttribute(key, value) {\n        return this;\n    }\n    // By default does nothing\n    setAttributes(attributes) {\n        return this;\n    }\n    // By default does nothing\n    addEvent(name, attributes) {\n        return this;\n    }\n    // By default does nothing\n    setStatus(status) {\n        return this;\n    }\n    // By default does nothing\n    updateName(name) {\n        return this;\n    }\n    // By default does nothing\n    end(endTime) { }\n    // isRecording always returns false for noopSpan.\n    isRecording() {\n        return false;\n    }\n}\nexports.NoopSpan = NoopSpan;\nexports.NOOP_SPAN = new NoopSpan();\n//# sourceMappingURL=NoopSpan.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NoopSpan_1 = __webpack_require__(/*! ./NoopSpan */ \"./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js\");\n/**\n * No-op implementations of {@link Tracer}.\n */\nclass NoopTracer {\n    getCurrentSpan() {\n        return NoopSpan_1.NOOP_SPAN;\n    }\n    // startSpan starts a noop span.\n    startSpan(name, options) {\n        return NoopSpan_1.NOOP_SPAN;\n    }\n    withSpan(span, fn) {\n        return fn();\n    }\n    bind(target, span) {\n        return target;\n    }\n}\nexports.NoopTracer = NoopTracer;\nexports.NOOP_TRACER = new NoopTracer();\n//# sourceMappingURL=NoopTracer.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NoopTracer_1 = __webpack_require__(/*! ./NoopTracer */ \"./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js\");\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent Tracer\n * for all calls to `getTracer`\n */\nclass NoopTracerProvider {\n    getTracer(_name, _version) {\n        return NoopTracer_1.NOOP_TRACER;\n    }\n}\nexports.NoopTracerProvider = NoopTracerProvider;\nexports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n//# sourceMappingURL=NoopTracerProvider.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/span_kind.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/trace/span_kind.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/status.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An enumeration of canonical status codes.\n */\nvar CanonicalCode;\n(function (CanonicalCode) {\n    /**\n     * Not an error; returned on success\n     */\n    CanonicalCode[CanonicalCode[\"OK\"] = 0] = \"OK\";\n    /**\n     * The operation was cancelled (typically by the caller).\n     */\n    CanonicalCode[CanonicalCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /**\n     * Unknown error.  An example of where this error may be returned is\n     * if a status value received from another address space belongs to\n     * an error-space that is not known in this address space.  Also\n     * errors raised by APIs that do not return enough error information\n     * may be converted to this error.\n     */\n    CanonicalCode[CanonicalCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /**\n     * Client specified an invalid argument.  Note that this differs\n     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n     * that are problematic regardless of the state of the system\n     * (e.g., a malformed file name).\n     */\n    CanonicalCode[CanonicalCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /**\n     * Deadline expired before operation could complete.  For operations\n     * that change the state of the system, this error may be returned\n     * even if the operation has completed successfully.  For example, a\n     * successful response from a server could have been delayed long\n     * enough for the deadline to expire.\n     */\n    CanonicalCode[CanonicalCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /**\n     * Some requested entity (e.g., file or directory) was not found.\n     */\n    CanonicalCode[CanonicalCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /**\n     * Some entity that we attempted to create (e.g., file or directory)\n     * already exists.\n     */\n    CanonicalCode[CanonicalCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /**\n     * The caller does not have permission to execute the specified\n     * operation.  PERMISSION_DENIED must not be used for rejections\n     * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n     * instead for those errors).  PERMISSION_DENIED must not be\n     * used if the caller can not be identified (use UNAUTHENTICATED\n     * instead for those errors).\n     */\n    CanonicalCode[CanonicalCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or\n     * perhaps the entire file system is out of space.\n     */\n    CanonicalCode[CanonicalCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /**\n     * Operation was rejected because the system is not in a state\n     * required for the operation's execution.  For example, directory\n     * to be deleted may be non-empty, an rmdir operation is applied to\n     * a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *\n     *  - Use UNAVAILABLE if the client can retry just the failing call.\n     *  - Use ABORTED if the client should retry at a higher-level\n     *    (e.g., restarting a read-modify-write sequence).\n     *  - Use FAILED_PRECONDITION if the client should not retry until\n     *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n     *    fails because the directory is non-empty, FAILED_PRECONDITION\n     *    should be returned since the client should not retry unless\n     *    they have first fixed up the directory by deleting files from it.\n     *  - Use FAILED_PRECONDITION if the client performs conditional\n     *    REST Get/Update/Delete on a resource and the resource on the\n     *    server does not match the condition. E.g., conflicting\n     *    read-modify-write on the same resource.\n     */\n    CanonicalCode[CanonicalCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /**\n     * The operation was aborted, typically due to a concurrency issue\n     * like sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION,\n     * ABORTED, and UNAVAILABLE.\n     */\n    CanonicalCode[CanonicalCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    /**\n     * Operation was attempted past the valid range.  E.g., seeking or\n     * reading past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n     * be fixed if the system state changes. For example, a 32-bit file\n     * system will generate INVALID_ARGUMENT if asked to read at an\n     * offset that is not in the range [0,2^32-1], but it will generate\n     * OUT_OF_RANGE if asked to read from an offset past the current\n     * file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n     * error) when it applies so that callers who are iterating through\n     * a space can easily look for an OUT_OF_RANGE error to detect when\n     * they are done.\n     */\n    CanonicalCode[CanonicalCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /**\n     * Operation is not implemented or not supported/enabled in this service.\n     */\n    CanonicalCode[CanonicalCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /**\n     * Internal errors.  Means some invariants expected by underlying\n     * system has been broken.  If you see one of these errors,\n     * something is very broken.\n     */\n    CanonicalCode[CanonicalCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /**\n     * The service is currently unavailable.  This is a most likely a\n     * transient condition and may be corrected by retrying with\n     * a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION,\n     * ABORTED, and UNAVAILABLE.\n     */\n    CanonicalCode[CanonicalCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    CanonicalCode[CanonicalCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    CanonicalCode[CanonicalCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(CanonicalCode = exports.CanonicalCode || (exports.CanonicalCode = {}));\n//# sourceMappingURL=status.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/trace/status.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An enumeration that represents global trace flags. These flags are\n * propagated to all child {@link Span}. These determine features such as\n * whether a Span should be traced. It is implemented as a bitmask.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst context_1 = __webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/context.js\");\nclass NoopContextManager {\n    active() {\n        return context_1.Context.ROOT_CONTEXT;\n    }\n    with(context, fn) {\n        return fn();\n    }\n    bind(target, context) {\n        return target;\n    }\n    enable() {\n        return this;\n    }\n    disable() {\n        return this;\n    }\n}\nexports.NoopContextManager = NoopContextManager;\n//# sourceMappingURL=NoopContextManager.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/context.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/context.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2020, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class which stores and manages current context values. All methods which\n * update context such as get and delete do not modify an existing context,\n * but create a new one with updated values.\n */\nclass Context {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    constructor(parentContext) {\n        this._currentContext = parentContext ? new Map(parentContext) : new Map();\n    }\n    /** Get a key to uniquely identify a context value */\n    static createKey(description) {\n        return Symbol(description);\n    }\n    /**\n     * Get a value from the context.\n     *\n     * @param key key which identifies a context value\n     */\n    getValue(key) {\n        return this._currentContext.get(key);\n    }\n    /**\n     * Create a new context which inherits from this context and has\n     * the given key set to the given value.\n     *\n     * @param key context key for which to set the value\n     * @param value value to set for the given key\n     */\n    setValue(key, value) {\n        const context = new Context(this._currentContext);\n        context._currentContext.set(key, value);\n        return context;\n    }\n    /**\n     * Return a new context which inherits from this context but does\n     * not contain a value for the given key.\n     *\n     * @param key context key for which to clear a value\n     */\n    deleteValue(key) {\n        const context = new Context(this._currentContext);\n        context._currentContext.delete(key);\n        return context;\n    }\n}\nexports.Context = Context;\n/** The root context is used as the default parent context when there is no active context */\nContext.ROOT_CONTEXT = new Context();\n/**\n * This is another identifier to the root context which allows developers to easily search the\n * codebase for direct uses of context which need to be removed in later PRs.\n *\n * It's existence is temporary and it should be removed when all references are fixed.\n */\nContext.TODO = Context.ROOT_CONTEXT;\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/index.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/context.js\"));\n__export(__webpack_require__(/*! ./NoopContextManager */ \"./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js\"));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/api/node_modules/@opentelemetry/context-base/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopContextManager = void 0;\nconst context_1 = __webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/context-base/build/src/context.js\");\nclass NoopContextManager {\n    active() {\n        return context_1.Context.ROOT_CONTEXT;\n    }\n    with(context, fn) {\n        return fn();\n    }\n    bind(target, context) {\n        return target;\n    }\n    enable() {\n        return this;\n    }\n    disable() {\n        return this;\n    }\n}\nexports.NoopContextManager = NoopContextManager;\n//# sourceMappingURL=NoopContextManager.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/context.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/context.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Context {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    constructor(parentContext) {\n        this._currentContext = parentContext ? new Map(parentContext) : new Map();\n    }\n    /** Get a key to uniquely identify a context value */\n    static createKey(description) {\n        return Symbol(description);\n    }\n    /**\n     * Get a value from the context.\n     *\n     * @param key key which identifies a context value\n     */\n    getValue(key) {\n        return this._currentContext.get(key);\n    }\n    /**\n     * Create a new context which inherits from this context and has\n     * the given key set to the given value.\n     *\n     * @param key context key for which to set the value\n     * @param value value to set for the given key\n     */\n    setValue(key, value) {\n        const context = new Context(this._currentContext);\n        context._currentContext.set(key, value);\n        return context;\n    }\n    /**\n     * Return a new context which inherits from this context but does\n     * not contain a value for the given key.\n     *\n     * @param key context key for which to clear a value\n     */\n    deleteValue(key) {\n        const context = new Context(this._currentContext);\n        context._currentContext.delete(key);\n        return context;\n    }\n}\nexports.Context = Context;\n/** The root context is used as the default parent context when there is no active context */\nContext.ROOT_CONTEXT = new Context();\n/**\n * This is another identifier to the root context which allows developers to easily search the\n * codebase for direct uses of context which need to be removed in later PRs.\n *\n * It's existence is temporary and it should be removed when all references are fixed.\n */\nContext.TODO = Context.ROOT_CONTEXT;\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/context-base/build/src/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(__webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/context-base/build/src/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/context-base/build/src/context.js\"), exports);\n__exportStar(__webpack_require__(/*! ./NoopContextManager */ \"./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/context-base/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/types.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/context-base/build/src/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/ExportResult.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/ExportResult.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportResult = void 0;\nvar ExportResult;\n(function (ExportResult) {\n    ExportResult[ExportResult[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResult[ExportResult[\"FAILED_NOT_RETRYABLE\"] = 1] = \"FAILED_NOT_RETRYABLE\";\n    ExportResult[ExportResult[\"FAILED_RETRYABLE\"] = 2] = \"FAILED_RETRYABLE\";\n})(ExportResult = exports.ExportResult || (exports.ExportResult = {}));\n//# sourceMappingURL=ExportResult.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/ExportResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/common/ConsoleLogger.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/common/ConsoleLogger.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsoleLogger = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/core/build/src/common/types.js\");\nconst platform_1 = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/index.js\");\nclass ConsoleLogger {\n    constructor(level = platform_1.getEnv().OTEL_LOG_LEVEL) {\n        if (level >= types_1.LogLevel.DEBUG) {\n            this.debug = (...args) => {\n                console.debug(...args);\n            };\n        }\n        if (level >= types_1.LogLevel.INFO) {\n            this.info = (...args) => {\n                console.info(...args);\n            };\n        }\n        if (level >= types_1.LogLevel.WARN) {\n            this.warn = (...args) => {\n                console.warn(...args);\n            };\n        }\n        if (level >= types_1.LogLevel.ERROR) {\n            this.error = (...args) => {\n                console.error(...args);\n            };\n        }\n    }\n    debug(message, ...args) { }\n    error(message, ...args) { }\n    warn(message, ...args) { }\n    info(message, ...args) { }\n}\nexports.ConsoleLogger = ConsoleLogger;\n//# sourceMappingURL=ConsoleLogger.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/common/ConsoleLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/common/NoopLogger.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/common/NoopLogger.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopLogger = void 0;\n/** No-op implementation of Logger */\nclass NoopLogger {\n    // By default does nothing\n    debug(message, ...args) { }\n    // By default does nothing\n    error(message, ...args) { }\n    // By default does nothing\n    warn(message, ...args) { }\n    // By default does nothing\n    info(message, ...args) { }\n}\nexports.NoopLogger = NoopLogger;\n//# sourceMappingURL=NoopLogger.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/common/NoopLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/common/time.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/common/time.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTimeInput = exports.isTimeInputHrTime = exports.hrTimeToMicroseconds = exports.hrTimeToMilliseconds = exports.hrTimeToNanoseconds = exports.hrTimeToTimeStamp = exports.hrTimeDuration = exports.timeInputToHrTime = exports.hrTime = void 0;\nconst platform_1 = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/index.js\");\nconst NANOSECOND_DIGITS = 9;\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number to HrTime\n * @param epochMillis\n */\nfunction numberToHrtime(epochMillis) {\n    const epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    const seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    const nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) *\n        SECOND_TO_NANOSECONDS;\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    let timeOrigin = platform_1.otperformance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        const perf = platform_1.otperformance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n    const timeOrigin = numberToHrtime(getTimeOrigin());\n    const now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : platform_1.otperformance.now());\n    let seconds = timeOrigin[0] + now[0];\n    let nanos = timeOrigin[1] + now[1];\n    // Nanoseconds\n    if (nanos > SECOND_TO_NANOSECONDS) {\n        nanos -= SECOND_TO_NANOSECONDS;\n        seconds += 1;\n    }\n    return [seconds, nanos];\n}\nexports.hrTime = hrTime;\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nfunction timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return numberToHrtime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return [time.getTime(), 0];\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\nexports.timeInputToHrTime = timeInputToHrTime;\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n    let seconds = endTime[0] - startTime[0];\n    let nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\nexports.hrTimeDuration = hrTimeDuration;\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param hrTime\n */\nfunction hrTimeToTimeStamp(hrTime) {\n    const precision = NANOSECOND_DIGITS;\n    const tmp = `${'0'.repeat(precision)}${hrTime[1]}Z`;\n    const nanoString = tmp.substr(tmp.length - precision - 1);\n    const date = new Date(hrTime[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\nexports.hrTimeToTimeStamp = hrTimeToTimeStamp;\n/**\n * Convert hrTime to nanoseconds.\n * @param hrTime\n */\nfunction hrTimeToNanoseconds(hrTime) {\n    return hrTime[0] * SECOND_TO_NANOSECONDS + hrTime[1];\n}\nexports.hrTimeToNanoseconds = hrTimeToNanoseconds;\n/**\n * Convert hrTime to milliseconds.\n * @param hrTime\n */\nfunction hrTimeToMilliseconds(hrTime) {\n    return Math.round(hrTime[0] * 1e3 + hrTime[1] / 1e6);\n}\nexports.hrTimeToMilliseconds = hrTimeToMilliseconds;\n/**\n * Convert hrTime to microseconds.\n * @param hrTime\n */\nfunction hrTimeToMicroseconds(hrTime) {\n    return Math.round(hrTime[0] * 1e6 + hrTime[1] / 1e3);\n}\nexports.hrTimeToMicroseconds = hrTimeToMicroseconds;\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\nexports.isTimeInputHrTime = isTimeInputHrTime;\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\nexports.isTimeInput = isTimeInput;\n//# sourceMappingURL=time.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/common/time.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/common/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/common/types.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevel = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/common/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/context/context.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/context/context.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getParentSpanContext = exports.setExtractedSpanContext = exports.getExtractedSpanContext = exports.setActiveSpan = exports.getActiveSpan = exports.ACTIVE_SPAN_KEY = void 0;\nconst context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ \"./node_modules/@opentelemetry/context-base/build/src/index.js\");\n/**\n * Active span key\n */\nexports.ACTIVE_SPAN_KEY = context_base_1.Context.createKey('OpenTelemetry Context Key ACTIVE_SPAN');\nconst EXTRACTED_SPAN_CONTEXT_KEY = context_base_1.Context.createKey('OpenTelemetry Context Key EXTRACTED_SPAN_CONTEXT');\n/**\n * Return the active span if one exists\n *\n * @param context context to get span from\n */\nfunction getActiveSpan(context) {\n    return context.getValue(exports.ACTIVE_SPAN_KEY) || undefined;\n}\nexports.getActiveSpan = getActiveSpan;\n/**\n * Set the active span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setActiveSpan(context, span) {\n    return context.setValue(exports.ACTIVE_SPAN_KEY, span);\n}\nexports.setActiveSpan = setActiveSpan;\n/**\n * Get the extracted span context from a context\n *\n * @param context context to get span context from\n */\nfunction getExtractedSpanContext(context) {\n    return (context.getValue(EXTRACTED_SPAN_CONTEXT_KEY) || undefined);\n}\nexports.getExtractedSpanContext = getExtractedSpanContext;\n/**\n * Set the extracted span context on a context\n *\n * @param context context to set span context on\n * @param spanContext span context to set\n */\nfunction setExtractedSpanContext(context, spanContext) {\n    return context.setValue(EXTRACTED_SPAN_CONTEXT_KEY, spanContext);\n}\nexports.setExtractedSpanContext = setExtractedSpanContext;\n/**\n * Get the span context of the parent span if it exists,\n * or the extracted span context if there is no active\n * span.\n *\n * @param context context to get values from\n */\nfunction getParentSpanContext(context) {\n    var _a;\n    return ((_a = getActiveSpan(context)) === null || _a === void 0 ? void 0 : _a.context()) || getExtractedSpanContext(context);\n}\nexports.getParentSpanContext = getParentSpanContext;\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/context/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/context/propagation/B3Propagator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/context/propagation/B3Propagator.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.B3Propagator = exports.X_B3_SAMPLED = exports.X_B3_SPAN_ID = exports.X_B3_TRACE_ID = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\nconst context_1 = __webpack_require__(/*! ../context */ \"./node_modules/@opentelemetry/core/build/src/context/context.js\");\nexports.X_B3_TRACE_ID = 'x-b3-traceid';\nexports.X_B3_SPAN_ID = 'x-b3-spanid';\nexports.X_B3_SAMPLED = 'x-b3-sampled';\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{16}){1,2}$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nconst INVALID_ID_REGEX = /^0+$/i;\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && !INVALID_ID_REGEX.test(traceId);\n}\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && !INVALID_ID_REGEX.test(spanId);\n}\n/**\n * Propagator for the B3 HTTP header format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nclass B3Propagator {\n    inject(context, carrier, setter) {\n        const spanContext = context_1.getParentSpanContext(context);\n        if (!spanContext)\n            return;\n        if (isValidTraceId(spanContext.traceId) &&\n            isValidSpanId(spanContext.spanId)) {\n            setter(carrier, exports.X_B3_TRACE_ID, spanContext.traceId);\n            setter(carrier, exports.X_B3_SPAN_ID, spanContext.spanId);\n            // We set the header only if there is an existing sampling decision.\n            // Otherwise we will omit it => Absent.\n            if (spanContext.traceFlags !== undefined) {\n                setter(carrier, exports.X_B3_SAMPLED, (api_1.TraceFlags.SAMPLED & spanContext.traceFlags) === api_1.TraceFlags.SAMPLED\n                    ? '1'\n                    : '0');\n            }\n        }\n    }\n    extract(context, carrier, getter) {\n        const traceIdHeader = getter(carrier, exports.X_B3_TRACE_ID);\n        const spanIdHeader = getter(carrier, exports.X_B3_SPAN_ID);\n        const sampledHeader = getter(carrier, exports.X_B3_SAMPLED);\n        const traceIdHeaderValue = Array.isArray(traceIdHeader)\n            ? traceIdHeader[0]\n            : traceIdHeader;\n        const spanId = Array.isArray(spanIdHeader) ? spanIdHeader[0] : spanIdHeader;\n        const options = Array.isArray(sampledHeader)\n            ? sampledHeader[0]\n            : sampledHeader;\n        if (typeof traceIdHeaderValue !== 'string' || typeof spanId !== 'string') {\n            return context;\n        }\n        const traceId = traceIdHeaderValue.padStart(32, '0');\n        if (isValidTraceId(traceId) && isValidSpanId(spanId)) {\n            return context_1.setExtractedSpanContext(context, {\n                traceId,\n                spanId,\n                isRemote: true,\n                traceFlags: isNaN(Number(options)) ? api_1.TraceFlags.NONE : Number(options),\n            });\n        }\n        return context;\n    }\n}\nexports.B3Propagator = B3Propagator;\n//# sourceMappingURL=B3Propagator.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/context/propagation/B3Propagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/context/propagation/HttpTraceContext.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/context/propagation/HttpTraceContext.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpTraceContext = exports.parseTraceParent = exports.TRACE_STATE_HEADER = exports.TRACE_PARENT_HEADER = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\nconst TraceState_1 = __webpack_require__(/*! ../../trace/TraceState */ \"./node_modules/@opentelemetry/core/build/src/trace/TraceState.js\");\nconst context_1 = __webpack_require__(/*! ../context */ \"./node_modules/@opentelemetry/core/build/src/context/context.js\");\nexports.TRACE_PARENT_HEADER = 'traceparent';\nexports.TRACE_STATE_HEADER = 'tracestate';\nconst VALID_TRACE_PARENT_REGEX = /^(?!ff)[\\da-f]{2}-([\\da-f]{32})-([\\da-f]{16})-([\\da-f]{2})(-|$)/;\nconst VERSION = '00';\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nfunction parseTraceParent(traceParent) {\n    const match = traceParent.match(VALID_TRACE_PARENT_REGEX);\n    if (!match ||\n        match[1] === '00000000000000000000000000000000' ||\n        match[2] === '0000000000000000') {\n        return null;\n    }\n    return {\n        traceId: match[1],\n        spanId: match[2],\n        traceFlags: parseInt(match[3], 16),\n    };\n}\nexports.parseTraceParent = parseTraceParent;\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nclass HttpTraceContext {\n    inject(context, carrier, setter) {\n        const spanContext = context_1.getParentSpanContext(context);\n        if (!spanContext)\n            return;\n        const traceParent = `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-0${Number(spanContext.traceFlags || api_1.TraceFlags.NONE).toString(16)}`;\n        setter(carrier, exports.TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter(carrier, exports.TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    }\n    extract(context, carrier, getter) {\n        const traceParentHeader = getter(carrier, exports.TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        const traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        const spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        const traceStateHeader = getter(carrier, exports.TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            const state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState_1.TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return context_1.setExtractedSpanContext(context, spanContext);\n    }\n}\nexports.HttpTraceContext = HttpTraceContext;\n//# sourceMappingURL=HttpTraceContext.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/context/propagation/HttpTraceContext.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/context/propagation/composite.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/context/propagation/composite.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompositePropagator = void 0;\nconst NoopLogger_1 = __webpack_require__(/*! ../../common/NoopLogger */ \"./node_modules/@opentelemetry/core/build/src/common/NoopLogger.js\");\n/** Combines multiple propagators into a single propagator. */\nclass CompositePropagator {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    constructor(config = {}) {\n        var _a, _b;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._logger = (_b = config.logger) !== null && _b !== void 0 ? _b : new NoopLogger_1.NoopLogger();\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    inject(context, carrier, setter) {\n        for (const propagator of this._propagators) {\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                this._logger.warn(`Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n        }\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    extract(context, carrier, getter) {\n        return this._propagators.reduce((ctx, propagator) => {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                this._logger.warn(`Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n            return ctx;\n        }, context);\n    }\n}\nexports.CompositePropagator = CompositePropagator;\n//# sourceMappingURL=composite.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/context/propagation/composite.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/context/propagation/types.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/context/propagation/types.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/context/propagation/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/correlation-context/correlation-context.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/correlation-context/correlation-context.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setCorrelationContext = exports.getCorrelationContext = void 0;\nconst context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ \"./node_modules/@opentelemetry/context-base/build/src/index.js\");\nconst CORRELATION_CONTEXT = context_base_1.Context.createKey('OpenTelemetry Distributed Contexts Key');\n/**\n * @param {Context} Context that manage all context values\n * @returns {CorrelationContext} Extracted correlation context from the context\n */\nfunction getCorrelationContext(context) {\n    return (context.getValue(CORRELATION_CONTEXT) || undefined);\n}\nexports.getCorrelationContext = getCorrelationContext;\n/**\n * @param {Context} Context that manage all context values\n * @param {CorrelationContext} correlation context that will be set in the actual context\n */\nfunction setCorrelationContext(context, correlationContext) {\n    return context.setValue(CORRELATION_CONTEXT, correlationContext);\n}\nexports.setCorrelationContext = setCorrelationContext;\n//# sourceMappingURL=correlation-context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/correlation-context/correlation-context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/correlation-context/propagation/HttpCorrelationContext.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/correlation-context/propagation/HttpCorrelationContext.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpCorrelationContext = exports.MAX_TOTAL_LENGTH = exports.MAX_PER_NAME_VALUE_PAIRS = exports.MAX_NAME_VALUE_PAIRS = exports.CORRELATION_CONTEXT_HEADER = void 0;\nconst correlation_context_1 = __webpack_require__(/*! ../correlation-context */ \"./node_modules/@opentelemetry/core/build/src/correlation-context/correlation-context.js\");\nconst KEY_PAIR_SEPARATOR = '=';\nconst PROPERTIES_SEPARATOR = ';';\nconst ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the correlation context\nexports.CORRELATION_CONTEXT_HEADER = 'otcorrelations';\n// Maximum number of name-value pairs allowed by w3c spec\nexports.MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexports.MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexports.MAX_TOTAL_LENGTH = 8192;\n/**\n * Propagates {@link CorrelationContext} through Context format propagation.\n *\n * Based on the Correlation Context specification:\n * https://w3c.github.io/correlation-context/\n */\nclass HttpCorrelationContext {\n    inject(context, carrier, setter) {\n        const correlationContext = correlation_context_1.getCorrelationContext(context);\n        if (!correlationContext)\n            return;\n        const keyPairs = this._getKeyPairs(correlationContext)\n            .filter((pair) => {\n            return pair.length <= exports.MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, exports.MAX_NAME_VALUE_PAIRS);\n        const headerValue = this._serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter(carrier, exports.CORRELATION_CONTEXT_HEADER, headerValue);\n        }\n    }\n    _serializeKeyPairs(keyPairs) {\n        return keyPairs.reduce((hValue, current) => {\n            const value = `${hValue}${hValue != '' ? ITEMS_SEPARATOR : ''}${current}`;\n            return value.length > exports.MAX_TOTAL_LENGTH ? hValue : value;\n        }, '');\n    }\n    _getKeyPairs(correlationContext) {\n        return Object.keys(correlationContext).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(correlationContext[key].value)}`);\n    }\n    extract(context, carrier, getter) {\n        const headerValue = getter(carrier, exports.CORRELATION_CONTEXT_HEADER);\n        if (!headerValue)\n            return context;\n        const correlationContext = {};\n        if (headerValue.length == 0) {\n            return context;\n        }\n        const pairs = headerValue.split(ITEMS_SEPARATOR);\n        if (pairs.length == 1)\n            return context;\n        pairs.forEach(entry => {\n            const keyPair = this._parsePairKeyValue(entry);\n            if (keyPair) {\n                correlationContext[keyPair.key] = { value: keyPair.value };\n            }\n        });\n        return correlation_context_1.setCorrelationContext(context, correlationContext);\n    }\n    _parsePairKeyValue(entry) {\n        const valueProps = entry.split(PROPERTIES_SEPARATOR);\n        if (valueProps.length <= 0)\n            return;\n        const keyPairPart = valueProps.shift();\n        if (!keyPairPart)\n            return;\n        const keyPair = keyPairPart.split(KEY_PAIR_SEPARATOR);\n        if (keyPair.length <= 1)\n            return;\n        const key = decodeURIComponent(keyPair[0].trim());\n        let value = decodeURIComponent(keyPair[1].trim());\n        if (valueProps.length > 0) {\n            value =\n                value + PROPERTIES_SEPARATOR + valueProps.join(PROPERTIES_SEPARATOR);\n        }\n        return { key, value };\n    }\n}\nexports.HttpCorrelationContext = HttpCorrelationContext;\n//# sourceMappingURL=HttpCorrelationContext.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/correlation-context/propagation/HttpCorrelationContext.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(__webpack_require__(/*! ./common/ConsoleLogger */ \"./node_modules/@opentelemetry/core/build/src/common/ConsoleLogger.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common/NoopLogger */ \"./node_modules/@opentelemetry/core/build/src/common/NoopLogger.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common/time */ \"./node_modules/@opentelemetry/core/build/src/common/time.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common/types */ \"./node_modules/@opentelemetry/core/build/src/common/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ExportResult */ \"./node_modules/@opentelemetry/core/build/src/ExportResult.js\"), exports);\n__exportStar(__webpack_require__(/*! ./version */ \"./node_modules/@opentelemetry/core/build/src/version.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/context */ \"./node_modules/@opentelemetry/core/build/src/context/context.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/B3Propagator */ \"./node_modules/@opentelemetry/core/build/src/context/propagation/B3Propagator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/composite */ \"./node_modules/@opentelemetry/core/build/src/context/propagation/composite.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/HttpTraceContext */ \"./node_modules/@opentelemetry/core/build/src/context/propagation/HttpTraceContext.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/types */ \"./node_modules/@opentelemetry/core/build/src/context/propagation/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./correlation-context/correlation-context */ \"./node_modules/@opentelemetry/core/build/src/correlation-context/correlation-context.js\"), exports);\n__exportStar(__webpack_require__(/*! ./correlation-context/propagation/HttpCorrelationContext */ \"./node_modules/@opentelemetry/core/build/src/correlation-context/propagation/HttpCorrelationContext.js\"), exports);\n__exportStar(__webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/NoRecordingSpan */ \"./node_modules/@opentelemetry/core/build/src/trace/NoRecordingSpan.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/sampler/AlwaysOffSampler */ \"./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOffSampler.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/sampler/AlwaysOnSampler */ \"./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOnSampler.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/sampler/ParentOrElseSampler */ \"./node_modules/@opentelemetry/core/build/src/trace/sampler/ParentOrElseSampler.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/sampler/ProbabilitySampler */ \"./node_modules/@opentelemetry/core/build/src/trace/sampler/ProbabilitySampler.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/spancontext-utils */ \"./node_modules/@opentelemetry/core/build/src/trace/spancontext-utils.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/TraceState */ \"./node_modules/@opentelemetry/core/build/src/trace/TraceState.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/url */ \"./node_modules/@opentelemetry/core/build/src/utils/url.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/wrap */ \"./node_modules/@opentelemetry/core/build/src/utils/wrap.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/internal/validators.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/internal/validators.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateValue = exports.validateKey = void 0;\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\nexports.validateKey = validateKey;\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\nexports.validateValue = validateValue;\n//# sourceMappingURL=validators.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/internal/validators.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/BaseAbstractPlugin.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/BaseAbstractPlugin.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseAbstractPlugin = void 0;\n/** This class represent the base to patch plugin. */\nclass BaseAbstractPlugin {\n    constructor(_tracerName, _tracerVersion) {\n        this._tracerName = _tracerName;\n        this._tracerVersion = _tracerVersion;\n    }\n    disable() {\n        this.unpatch();\n    }\n}\nexports.BaseAbstractPlugin = BaseAbstractPlugin;\n//# sourceMappingURL=BaseAbstractPlugin.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/BaseAbstractPlugin.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/BasePlugin.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/BasePlugin.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePlugin = void 0;\nconst BaseAbstractPlugin_1 = __webpack_require__(/*! ../BaseAbstractPlugin */ \"./node_modules/@opentelemetry/core/build/src/platform/BaseAbstractPlugin.js\");\n/** This class represent the base to patch plugin. */\nclass BasePlugin extends BaseAbstractPlugin_1.BaseAbstractPlugin {\n    enable(moduleExports, tracerProvider, logger, config) {\n        this._moduleExports = moduleExports;\n        this._tracer = tracerProvider.getTracer(this._tracerName, this._tracerVersion);\n        this._logger = logger;\n        if (config)\n            this._config = config;\n        return this.patch();\n    }\n}\nexports.BasePlugin = BasePlugin;\n//# sourceMappingURL=BasePlugin.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/BasePlugin.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/environment.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/environment.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnv = void 0;\nconst environment_1 = __webpack_require__(/*! ../../utils/environment */ \"./node_modules/@opentelemetry/core/build/src/utils/environment.js\");\n/**\n * Gets the environment variables\n */\nfunction getEnv() {\n    const _window = window;\n    const globalEnv = environment_1.parseEnvironment(_window);\n    return Object.assign({}, environment_1.DEFAULT_ENVIRONMENT, globalEnv);\n}\nexports.getEnv = getEnv;\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/hex-to-base64.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/hex-to-base64.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBase64 = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction hexToBase64(hexStr) {\n    const hexStrLen = hexStr.length;\n    let hexAsciiCharsStr = '';\n    for (let i = 0; i < hexStrLen; i += 2) {\n        const hexPair = hexStr.substring(i, i + 2);\n        const hexVal = parseInt(hexPair, 16);\n        hexAsciiCharsStr += String.fromCharCode(hexVal);\n    }\n    return btoa(hexAsciiCharsStr);\n}\nexports.hexToBase64 = hexToBase64;\n//# sourceMappingURL=hex-to-base64.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/hex-to-base64.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/id.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/id.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomSpanId = exports.randomTraceId = void 0;\nconst cryptoLib = window.crypto || window.msCrypto;\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nconst randomBytesArray = new Uint8Array(TRACE_ID_BYTES);\n/** Returns a random 16-byte trace ID formatted as a 32-char hex string. */\nfunction randomTraceId() {\n    cryptoLib.getRandomValues(randomBytesArray);\n    return toHex(randomBytesArray.slice(0, TRACE_ID_BYTES));\n}\nexports.randomTraceId = randomTraceId;\n/** Returns a random 8-byte span ID formatted as a 16-char hex string. */\nfunction randomSpanId() {\n    cryptoLib.getRandomValues(randomBytesArray);\n    return toHex(randomBytesArray.slice(0, SPAN_ID_BYTES));\n}\nexports.randomSpanId = randomSpanId;\n/**\n * Get the hex string representation of a byte array\n *\n * @param byteArray\n */\nfunction toHex(byteArray) {\n    const chars = new Array(byteArray.length * 2);\n    const alpha = 'a'.charCodeAt(0) - 10;\n    const digit = '0'.charCodeAt(0);\n    let p = 0;\n    for (let i = 0; i < byteArray.length; i++) {\n        let nibble = (byteArray[i] >>> 4) & 0xf;\n        chars[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n        nibble = byteArray[i] & 0xf;\n        chars[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n    }\n    return String.fromCharCode.apply(null, chars);\n}\n//# sourceMappingURL=id.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/id.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(__webpack_require__(/*! ./BasePlugin */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/BasePlugin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./environment */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/environment.js\"), exports);\n__exportStar(__webpack_require__(/*! ./hex-to-base64 */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/hex-to-base64.js\"), exports);\n__exportStar(__webpack_require__(/*! ./id */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/id.js\"), exports);\n__exportStar(__webpack_require__(/*! ./performance */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/performance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sdk-info */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/sdk-info.js\"), exports);\n__exportStar(__webpack_require__(/*! ./timer-util */ \"./node_modules/@opentelemetry/core/build/src/platform/browser/timer-util.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/performance.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/performance.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.otperformance = void 0;\nexports.otperformance = performance;\n//# sourceMappingURL=performance.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/performance.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/sdk-info.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/sdk-info.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SDK_INFO = void 0;\nconst version_1 = __webpack_require__(/*! ../../version */ \"./node_modules/@opentelemetry/core/build/src/version.js\");\n/** Constants describing the SDK in use */\nexports.SDK_INFO = {\n    NAME: 'opentelemetry',\n    RUNTIME: 'browser',\n    LANGUAGE: 'webjs',\n    VERSION: version_1.VERSION,\n};\n//# sourceMappingURL=sdk-info.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/sdk-info.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/platform/browser/timer-util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/platform/browser/timer-util.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unrefTimer = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction unrefTimer(timer) { }\nexports.unrefTimer = unrefTimer;\n//# sourceMappingURL=timer-util.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/platform/browser/timer-util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/NoRecordingSpan.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/NoRecordingSpan.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoRecordingSpan = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\nconst spancontext_utils_1 = __webpack_require__(/*! ../trace/spancontext-utils */ \"./node_modules/@opentelemetry/core/build/src/trace/spancontext-utils.js\");\n/**\n * The NoRecordingSpan extends the {@link NoopSpan}, making all operations no-op\n * except context propagation.\n */\nclass NoRecordingSpan extends api_1.NoopSpan {\n    constructor(spanContext) {\n        super(spanContext);\n        this._context = spanContext || spancontext_utils_1.INVALID_SPAN_CONTEXT;\n    }\n    // Returns a SpanContext.\n    context() {\n        return this._context;\n    }\n}\nexports.NoRecordingSpan = NoRecordingSpan;\n//# sourceMappingURL=NoRecordingSpan.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/NoRecordingSpan.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/TraceState.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/TraceState.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceState = void 0;\nconst validators_1 = __webpack_require__(/*! ../internal/validators */ \"./node_modules/@opentelemetry/core/build/src/internal/validators.js\");\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nclass TraceState {\n    constructor(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    set(key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        if (this._internalState.has(key))\n            this._internalState.delete(key);\n        this._internalState.set(key, value);\n    }\n    unset(key) {\n        this._internalState.delete(key);\n    }\n    get(key) {\n        return this._internalState.get(key);\n    }\n    serialize() {\n        return this._keys()\n            .reduce((agg, key) => {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    }\n    _parse(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce((agg, part) => {\n            const i = part.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                const key = part.slice(0, i);\n                const value = part.slice(i + 1, part.length);\n                if (validators_1.validateKey(key) && validators_1.validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    }\n    _keys() {\n        return Array.from(this._internalState.keys()).reverse();\n    }\n}\nexports.TraceState = TraceState;\n//# sourceMappingURL=TraceState.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/TraceState.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOffSampler.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOffSampler.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlwaysOffSampler = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\n/** Sampler that samples no traces. */\nclass AlwaysOffSampler {\n    shouldSample() {\n        return {\n            decision: api_1.SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return `AlwaysOffSampler`;\n    }\n}\nexports.AlwaysOffSampler = AlwaysOffSampler;\n//# sourceMappingURL=AlwaysOffSampler.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOffSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOnSampler.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOnSampler.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlwaysOnSampler = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\n/** Sampler that samples all traces. */\nclass AlwaysOnSampler {\n    shouldSample() {\n        return {\n            decision: api_1.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    }\n    toString() {\n        return `AlwaysOnSampler`;\n    }\n}\nexports.AlwaysOnSampler = AlwaysOnSampler;\n//# sourceMappingURL=AlwaysOnSampler.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/sampler/AlwaysOnSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/sampler/ParentOrElseSampler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/sampler/ParentOrElseSampler.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParentOrElseSampler = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nclass ParentOrElseSampler {\n    constructor(_delegateSampler) {\n        this._delegateSampler = _delegateSampler;\n    }\n    shouldSample(parentContext, traceId, spanName, spanKind, attributes, links) {\n        // Respect the parent sampling decision if there is one\n        if (parentContext) {\n            return {\n                decision: (api_1.TraceFlags.SAMPLED & parentContext.traceFlags) === api_1.TraceFlags.SAMPLED\n                    ? api_1.SamplingDecision.RECORD_AND_SAMPLED\n                    : api_1.SamplingDecision.NOT_RECORD,\n            };\n        }\n        return this._delegateSampler.shouldSample(parentContext, traceId, spanName, spanKind, attributes, links);\n    }\n    toString() {\n        return `ParentOrElse{${this._delegateSampler.toString()}}`;\n    }\n}\nexports.ParentOrElseSampler = ParentOrElseSampler;\n//# sourceMappingURL=ParentOrElseSampler.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/sampler/ParentOrElseSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/sampler/ProbabilitySampler.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/sampler/ProbabilitySampler.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProbabilitySampler = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\n/** Sampler that samples a given fraction of traces. */\nclass ProbabilitySampler {\n    constructor(_probability = 0) {\n        this._probability = _probability;\n        this._probability = this._normalize(_probability);\n    }\n    shouldSample(parentContext) {\n        // Respect the parent sampling decision if there is one.\n        // TODO(#1284): add an option to ignore parent regarding to spec.\n        if (parentContext) {\n            return {\n                decision: (api_1.TraceFlags.SAMPLED & parentContext.traceFlags) === api_1.TraceFlags.SAMPLED\n                    ? api_1.SamplingDecision.RECORD_AND_SAMPLED\n                    : api_1.SamplingDecision.NOT_RECORD,\n            };\n        }\n        return {\n            decision: Math.random() < this._probability\n                ? api_1.SamplingDecision.RECORD_AND_SAMPLED\n                : api_1.SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return `ProbabilitySampler{${this._probability}}`;\n    }\n    _normalize(probability) {\n        if (typeof probability !== 'number' || isNaN(probability))\n            return 0;\n        return probability >= 1 ? 1 : probability <= 0 ? 0 : probability;\n    }\n}\nexports.ProbabilitySampler = ProbabilitySampler;\n//# sourceMappingURL=ProbabilitySampler.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/sampler/ProbabilitySampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/trace/spancontext-utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/trace/spancontext-utils.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValid = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js\");\nexports.INVALID_SPANID = '0';\nexports.INVALID_TRACEID = '0';\nexports.INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACEID,\n    spanId: exports.INVALID_SPANID,\n    traceFlags: api_1.TraceFlags.NONE,\n};\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isValid(spanContext) {\n    return (spanContext.traceId !== exports.INVALID_TRACEID &&\n        spanContext.spanId !== exports.INVALID_SPANID);\n}\nexports.isValid = isValid;\n//# sourceMappingURL=spancontext-utils.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/trace/spancontext-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/utils/environment.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/utils/environment.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseEnvironment = exports.DEFAULT_ENVIRONMENT = void 0;\nconst types_1 = __webpack_require__(/*! ../common/types */ \"./node_modules/@opentelemetry/core/build/src/common/types.js\");\nconst ENVIRONMENT_NUMBERS = [\n    'OTEL_SAMPLING_PROBABILITY',\n];\n/**\n * Default environment variables\n */\nexports.DEFAULT_ENVIRONMENT = {\n    OTEL_NO_PATCH_MODULES: '',\n    OTEL_LOG_LEVEL: types_1.LogLevel.INFO,\n    OTEL_SAMPLING_PROBABILITY: 1,\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min = -Infinity, max = Infinity) {\n    if (typeof values[name] !== 'undefined') {\n        const value = Number(values[name]);\n        if (!isNaN(value) && value >= min && value <= max) {\n            environment[name] = value;\n        }\n    }\n}\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    const value = values[key];\n    switch (typeof value === 'string' ? value.toUpperCase() : value) {\n        case 'DEBUG':\n            environment[key] = types_1.LogLevel.DEBUG;\n            break;\n        case 'INFO':\n            environment[key] = types_1.LogLevel.INFO;\n            break;\n        case 'WARN':\n            environment[key] = types_1.LogLevel.WARN;\n            break;\n        case 'ERROR':\n            environment[key] = types_1.LogLevel.ERROR;\n            break;\n        default:\n            // do nothing\n            break;\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nfunction parseEnvironment(values) {\n    const environment = {};\n    for (const env in exports.DEFAULT_ENVIRONMENT) {\n        const key = env;\n        switch (key) {\n            case 'OTEL_SAMPLING_PROBABILITY':\n                parseNumber(key, environment, values, 0, 1);\n                break;\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (ENVIRONMENT_NUMBERS.indexOf(key) >= 0) {\n                    parseNumber(key, environment, values);\n                }\n                else {\n                    if (typeof values[key] !== 'undefined') {\n                        environment[key] = values[key];\n                    }\n                }\n        }\n    }\n    return environment;\n}\nexports.parseEnvironment = parseEnvironment;\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/utils/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/utils/url.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/utils/url.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isUrlIgnored = exports.urlMatches = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction urlMatches(url, urlToMatch) {\n    if (typeof urlToMatch === 'string') {\n        return url === urlToMatch;\n    }\n    else {\n        return !!url.match(urlToMatch);\n    }\n}\nexports.urlMatches = urlMatches;\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nfunction isUrlIgnored(url, ignoredUrls) {\n    if (!ignoredUrls) {\n        return false;\n    }\n    for (const ignoreUrl of ignoredUrls) {\n        if (urlMatches(url, ignoreUrl)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isUrlIgnored = isUrlIgnored;\n//# sourceMappingURL=url.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/utils/url.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/utils/wrap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/utils/wrap.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isWrapped = void 0;\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nfunction isWrapped(func) {\n    return (typeof func === 'function' &&\n        typeof func.__original === 'function' &&\n        typeof func.__unwrap === 'function' &&\n        func.__wrapped === true);\n}\nexports.isWrapped = isWrapped;\n//# sourceMappingURL=wrap.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/utils/wrap.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/src/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/src/version.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '0.10.0';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/build/src/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/context.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/context.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextAPI = void 0;\nconst context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ \"./node_modules/@opentelemetry/context-base/build/src/index.js\");\nconst global_utils_1 = __webpack_require__(/*! ./global-utils */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js\");\nconst NOOP_CONTEXT_MANAGER = new context_base_1.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nclass ContextAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() { }\n    /** Get the singleton instance of the Context API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current context manager. Returns the initialized context manager\n     */\n    setGlobalContextManager(contextManager) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) {\n            // global context manager has already been set\n            return this._getContextManager();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, contextManager, NOOP_CONTEXT_MANAGER);\n        return contextManager;\n    }\n    /**\n     * Get the currently active context\n     */\n    active() {\n        return this._getContextManager().active();\n    }\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     */\n    with(context, fn) {\n        return this._getContextManager().with(context, fn);\n    }\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param target function or event emitter to bind\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     */\n    bind(target, context = this.active()) {\n        return this._getContextManager().bind(target, context);\n    }\n    _getContextManager() {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_CONTEXT_MANAGER);\n    }\n    /** Disable and remove the global context manager */\n    disable() {\n        this._getContextManager().disable();\n        delete global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY];\n    }\n}\nexports.ContextAPI = ContextAPI;\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.API_BACKWARDS_COMPATIBILITY_VERSION = exports.makeGetter = exports._global = exports.GLOBAL_TRACE_API_KEY = exports.GLOBAL_PROPAGATION_API_KEY = exports.GLOBAL_METRICS_API_KEY = exports.GLOBAL_CONTEXT_MANAGER_API_KEY = void 0;\nconst platform_1 = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/index.js\");\nexports.GLOBAL_CONTEXT_MANAGER_API_KEY = Symbol.for('io.opentelemetry.js.api.context');\nexports.GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');\nexports.GLOBAL_PROPAGATION_API_KEY = Symbol.for('io.opentelemetry.js.api.propagation');\nexports.GLOBAL_TRACE_API_KEY = Symbol.for('io.opentelemetry.js.api.trace');\nexports._global = platform_1._globalThis;\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nfunction makeGetter(requiredVersion, instance, fallback) {\n    return (version) => version === requiredVersion ? instance : fallback;\n}\nexports.makeGetter = makeGetter;\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexports.API_BACKWARDS_COMPATIBILITY_VERSION = 0;\n//# sourceMappingURL=global-utils.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/metrics.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/metrics.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst NoopMeterProvider_1 = __webpack_require__(/*! ../metrics/NoopMeterProvider */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js\");\nconst global_utils_1 = __webpack_require__(/*! ./global-utils */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nclass MetricsAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() { }\n    /** Get the singleton instance of the Metrics API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current global meter. Returns the initialized global meter provider.\n     */\n    setGlobalMeterProvider(provider) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) {\n            // global meter provider has already been set\n            return this.getMeterProvider();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopMeterProvider_1.NOOP_METER_PROVIDER);\n        return provider;\n    }\n    /**\n     * Returns the global meter provider.\n     */\n    getMeterProvider() {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopMeterProvider_1.NOOP_METER_PROVIDER);\n    }\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    getMeter(name, version) {\n        return this.getMeterProvider().getMeter(name, version);\n    }\n    /** Remove the global meter provider */\n    disable() {\n        delete global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY];\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=metrics.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/metrics.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/propagation.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/propagation.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropagationAPI = void 0;\nconst getter_1 = __webpack_require__(/*! ../context/propagation/getter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/getter.js\");\nconst NoopHttpTextPropagator_1 = __webpack_require__(/*! ../context/propagation/NoopHttpTextPropagator */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js\");\nconst setter_1 = __webpack_require__(/*! ../context/propagation/setter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/setter.js\");\nconst context_1 = __webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/context.js\");\nconst global_utils_1 = __webpack_require__(/*! ./global-utils */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js\");\nconst contextApi = context_1.ContextAPI.getInstance();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nclass PropagationAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() { }\n    /** Get the singleton instance of the Propagator API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current propagator. Returns the initialized propagator\n     */\n    setGlobalPropagator(propagator) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {\n            // global propagator has already been set\n            return this._getGlobalPropagator();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);\n        return propagator;\n    }\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     * @param context Context carrying tracing data to inject. Defaults to the currently active context.\n     */\n    inject(carrier, setter = setter_1.defaultSetter, context = contextApi.active()) {\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    }\n    /**\n     * Extract context from a carrier\n     *\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     * @param context Context which the newly created context will inherit from. Defaults to the currently active context.\n     */\n    extract(carrier, getter = getter_1.defaultGetter, context = contextApi.active()) {\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    }\n    /** Remove the global propagator */\n    disable() {\n        delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];\n    }\n    _getGlobalPropagator() {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);\n    }\n}\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/propagation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/trace.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/trace.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceAPI = void 0;\nconst NoopTracerProvider_1 = __webpack_require__(/*! ../trace/NoopTracerProvider */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js\");\nconst global_utils_1 = __webpack_require__(/*! ./global-utils */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/global-utils.js\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nclass TraceAPI {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    constructor() { }\n    /** Get the singleton instance of the Trace API */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    }\n    /**\n     * Set the current global tracer. Returns the initialized global tracer provider\n     */\n    setGlobalTracerProvider(provider) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) {\n            // global tracer provider has already been set\n            return this.getTracerProvider();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopTracerProvider_1.NOOP_TRACER_PROVIDER);\n        return this.getTracerProvider();\n    }\n    /**\n     * Returns the global tracer provider.\n     */\n    getTracerProvider() {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTracerProvider_1.NOOP_TRACER_PROVIDER);\n    }\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    getTracer(name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    }\n    /** Remove the global tracer provider */\n    disable() {\n        delete global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY];\n    }\n}\nexports.TraceAPI = TraceAPI;\n//# sourceMappingURL=trace.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/trace.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Logger.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Logger.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Logger.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Logger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Time.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Time.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Time.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Time.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/HttpTextPropagator.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/HttpTextPropagator.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=HttpTextPropagator.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/HttpTextPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_HTTP_TEXT_PROPAGATOR = exports.NoopHttpTextPropagator = void 0;\n/**\n * No-op implementations of {@link HttpTextPropagator}.\n */\nclass NoopHttpTextPropagator {\n    /** Noop inject function does nothing */\n    inject(context, carrier, setter) { }\n    /** Noop extract function does nothing and returns the input context */\n    extract(context, carrier, getter) {\n        return context;\n    }\n}\nexports.NoopHttpTextPropagator = NoopHttpTextPropagator;\nexports.NOOP_HTTP_TEXT_PROPAGATOR = new NoopHttpTextPropagator();\n//# sourceMappingURL=NoopHttpTextPropagator.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/getter.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/getter.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultGetter = void 0;\n/**\n * Default getter which just does a simple property access. Returns\n * undefined if the key is not set.\n *\n * @param carrier\n * @param key\n */\nfunction defaultGetter(carrier, key) {\n    return carrier[key];\n}\nexports.defaultGetter = defaultGetter;\n//# sourceMappingURL=getter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/getter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/setter.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/setter.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultSetter = void 0;\n/**\n * Default setter which sets value via direct property access\n *\n * @param carrier\n * @param key\n */\nfunction defaultSetter(carrier, key, value) {\n    carrier[key] = value;\n}\nexports.defaultSetter = defaultSetter;\n//# sourceMappingURL=setter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/setter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/CorrelationContext.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/CorrelationContext.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=CorrelationContext.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/CorrelationContext.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryTtl = void 0;\n/**\n * EntryTtl is an integer that represents number of hops an entry can propagate.\n *\n * For now, ONLY special values (0 and -1) are supported.\n */\nvar EntryTtl;\n(function (EntryTtl) {\n    /**\n     * NO_PROPAGATION is considered to have local context and is used within the\n     * process it created.\n     */\n    EntryTtl[EntryTtl[\"NO_PROPAGATION\"] = 0] = \"NO_PROPAGATION\";\n    /** UNLIMITED_PROPAGATION can propagate unlimited hops. */\n    EntryTtl[EntryTtl[\"UNLIMITED_PROPAGATION\"] = -1] = \"UNLIMITED_PROPAGATION\";\n})(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));\n//# sourceMappingURL=EntryValue.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.propagation = exports.metrics = exports.trace = exports.context = void 0;\n__exportStar(__webpack_require__(/*! ./common/Logger */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Logger.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common/Time */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/common/Time.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/getter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/getter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/HttpTextPropagator */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/HttpTextPropagator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/NoopHttpTextPropagator */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js\"), exports);\n__exportStar(__webpack_require__(/*! ./context/propagation/setter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/context/propagation/setter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./correlation_context/CorrelationContext */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/CorrelationContext.js\"), exports);\n__exportStar(__webpack_require__(/*! ./correlation_context/EntryValue */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/BatchObserverResult */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BatchObserverResult.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/BoundInstrument */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BoundInstrument.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/Meter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Meter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/MeterProvider */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/MeterProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/Metric */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Metric.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/NoopMeter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/NoopMeterProvider */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/Observation */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Observation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./metrics/ObserverResult */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/ObserverResult.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/attributes */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/attributes.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/Event */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Event.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/instrumentation/Plugin */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/instrumentation/Plugin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/link_context */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link_context.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/link */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/NoopSpan */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/NoopTracer */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/NoopTracerProvider */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/Sampler */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Sampler.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/SamplingResult */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/span_context */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_context.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/span_kind */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_kind.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/span */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/SpanOptions */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/status */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/status.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/TimedEvent */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/trace_flags */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/trace_state */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_state.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/tracer_provider */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trace/tracer */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer.js\"), exports);\nvar context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ \"./node_modules/@opentelemetry/context-base/build/src/index.js\");\nObject.defineProperty(exports, \"Context\", { enumerable: true, get: function () { return context_base_1.Context; } });\nconst context_1 = __webpack_require__(/*! ./api/context */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/context.js\");\n/** Entrypoint for context API */\nexports.context = context_1.ContextAPI.getInstance();\nconst trace_1 = __webpack_require__(/*! ./api/trace */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/trace.js\");\n/** Entrypoint for trace API */\nexports.trace = trace_1.TraceAPI.getInstance();\nconst metrics_1 = __webpack_require__(/*! ./api/metrics */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/metrics.js\");\n/** Entrypoint for metrics API */\nexports.metrics = metrics_1.MetricsAPI.getInstance();\nconst propagation_1 = __webpack_require__(/*! ./api/propagation */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/api/propagation.js\");\n/** Entrypoint for propagation API */\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nexports.default = {\n    trace: exports.trace,\n    metrics: exports.metrics,\n    context: exports.context,\n    propagation: exports.propagation,\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BatchObserverResult.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BatchObserverResult.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=BatchObserverResult.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BatchObserverResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BoundInstrument.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BoundInstrument.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=BoundInstrument.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/BoundInstrument.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Meter.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Meter.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Meter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Meter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/MeterProvider.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/MeterProvider.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=MeterProvider.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/MeterProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Metric.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Metric.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueType = void 0;\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType = exports.ValueType || (exports.ValueType = {}));\n//# sourceMappingURL=Metric.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Metric.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_BATCH_OBSERVER_METRIC = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_COUNTER = exports.NOOP_METER = exports.NoopBoundBaseObserver = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBatchObserverMetric = exports.NoopBaseObserverMetric = exports.NoopValueRecorderMetric = exports.NoopCounterMetric = exports.NoopMetric = exports.NoopMeter = void 0;\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nclass NoopMeter {\n    constructor() { }\n    /**\n     * Returns constant noop value recorder.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    createValueRecorder(name, options) {\n        return exports.NOOP_VALUE_RECORDER_METRIC;\n    }\n    /**\n     * Returns a constant noop counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    createCounter(name, options) {\n        return exports.NOOP_COUNTER_METRIC;\n    }\n    /**\n     * Returns a constant noop UpDownCounter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    createUpDownCounter(name, options) {\n        return exports.NOOP_COUNTER_METRIC;\n    }\n    /**\n     * Returns constant noop value observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    createValueObserver(name, options, callback) {\n        return exports.NOOP_VALUE_OBSERVER_METRIC;\n    }\n    /**\n     * Returns constant noop batch observer.\n     * @param name the name of the metric.\n     * @param callback the batch observer callback\n     */\n    createBatchObserver(name, callback) {\n        return exports.NOOP_BATCH_OBSERVER_METRIC;\n    }\n}\nexports.NoopMeter = NoopMeter;\nclass NoopMetric {\n    constructor(instrument) {\n        this._instrument = instrument;\n    }\n    /**\n     * Returns a Bound Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Bound Instrument instead of\n     * always calling this method for every operations.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    bind(labels) {\n        return this._instrument;\n    }\n    /**\n     * Removes the Binding from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    unbind(labels) {\n        return;\n    }\n    /**\n     * Clears all timeseries from the Metric.\n     */\n    clear() {\n        return;\n    }\n}\nexports.NoopMetric = NoopMetric;\nclass NoopCounterMetric extends NoopMetric {\n    add(value, labels) {\n        this.bind(labels).add(value);\n    }\n}\nexports.NoopCounterMetric = NoopCounterMetric;\nclass NoopValueRecorderMetric extends NoopMetric {\n    record(value, labels, correlationContext, spanContext) {\n        if (typeof correlationContext === 'undefined') {\n            this.bind(labels).record(value);\n        }\n        else if (typeof spanContext === 'undefined') {\n            this.bind(labels).record(value, correlationContext);\n        }\n        else {\n            this.bind(labels).record(value, correlationContext, spanContext);\n        }\n    }\n}\nexports.NoopValueRecorderMetric = NoopValueRecorderMetric;\nclass NoopBaseObserverMetric extends NoopMetric {\n    observation() {\n        return {\n            observer: this,\n            value: 0,\n        };\n    }\n}\nexports.NoopBaseObserverMetric = NoopBaseObserverMetric;\nclass NoopBatchObserverMetric extends NoopMetric {\n}\nexports.NoopBatchObserverMetric = NoopBatchObserverMetric;\nclass NoopBoundCounter {\n    add(value) {\n        return;\n    }\n}\nexports.NoopBoundCounter = NoopBoundCounter;\nclass NoopBoundValueRecorder {\n    record(value, correlationContext, spanContext) {\n        return;\n    }\n}\nexports.NoopBoundValueRecorder = NoopBoundValueRecorder;\nclass NoopBoundBaseObserver {\n    update(value) { }\n}\nexports.NoopBoundBaseObserver = NoopBoundBaseObserver;\nexports.NOOP_METER = new NoopMeter();\nexports.NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);\nexports.NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexports.NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(exports.NOOP_BOUND_VALUE_RECORDER);\nexports.NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexports.NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_BATCH_OBSERVER_METRIC = new NoopBatchObserverMetric();\n//# sourceMappingURL=NoopMeter.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_METER_PROVIDER = exports.NoopMeterProvider = void 0;\nconst NoopMeter_1 = __webpack_require__(/*! ./NoopMeter */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js\");\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nclass NoopMeterProvider {\n    getMeter(_name, _version) {\n        return NoopMeter_1.NOOP_METER;\n    }\n}\nexports.NoopMeterProvider = NoopMeterProvider;\nexports.NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Observation.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Observation.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Observation.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/Observation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/ObserverResult.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/ObserverResult.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ObserverResult.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/metrics/ObserverResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._globalThis = void 0;\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexports._globalThis = typeof globalThis === 'object' ? globalThis : window;\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/index.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(__webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Event.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Event.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Event.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Event.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;\nconst trace_flags_1 = __webpack_require__(/*! ./trace_flags */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js\");\nexports.INVALID_TRACE_ID = '0';\nexports.INVALID_SPAN_ID = '0';\nconst INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACE_ID,\n    spanId: exports.INVALID_SPAN_ID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nclass NoopSpan {\n    constructor(_spanContext = INVALID_SPAN_CONTEXT) {\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    context() {\n        return this._spanContext;\n    }\n    // By default does nothing\n    setAttribute(key, value) {\n        return this;\n    }\n    // By default does nothing\n    setAttributes(attributes) {\n        return this;\n    }\n    // By default does nothing\n    addEvent(name, attributes) {\n        return this;\n    }\n    // By default does nothing\n    setStatus(status) {\n        return this;\n    }\n    // By default does nothing\n    updateName(name) {\n        return this;\n    }\n    // By default does nothing\n    end(endTime) { }\n    // isRecording always returns false for noopSpan.\n    isRecording() {\n        return false;\n    }\n}\nexports.NoopSpan = NoopSpan;\nexports.NOOP_SPAN = new NoopSpan();\n//# sourceMappingURL=NoopSpan.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_TRACER = exports.NoopTracer = void 0;\nconst NoopSpan_1 = __webpack_require__(/*! ./NoopSpan */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js\");\n/**\n * No-op implementations of {@link Tracer}.\n */\nclass NoopTracer {\n    getCurrentSpan() {\n        return NoopSpan_1.NOOP_SPAN;\n    }\n    // startSpan starts a noop span.\n    startSpan(name, options) {\n        return NoopSpan_1.NOOP_SPAN;\n    }\n    withSpan(span, fn) {\n        return fn();\n    }\n    bind(target, span) {\n        return target;\n    }\n}\nexports.NoopTracer = NoopTracer;\nexports.NOOP_TRACER = new NoopTracer();\n//# sourceMappingURL=NoopTracer.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_TRACER_PROVIDER = exports.NoopTracerProvider = void 0;\nconst NoopTracer_1 = __webpack_require__(/*! ./NoopTracer */ \"./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js\");\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nclass NoopTracerProvider {\n    getTracer(_name, _version) {\n        return NoopTracer_1.NOOP_TRACER;\n    }\n}\nexports.NoopTracerProvider = NoopTracerProvider;\nexports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n//# sourceMappingURL=NoopTracerProvider.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Sampler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Sampler.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Sampler.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/Sampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SamplingDecision = void 0;\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SpanOptions.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=TimedEvent.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/attributes.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/attributes.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=attributes.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/attributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/instrumentation/Plugin.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/instrumentation/Plugin.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Plugin.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/instrumentation/Plugin.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=link.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link_context.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link_context.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=link_context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/link_context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_context.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_context.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span_context.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_kind.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_kind.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanKind = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/span_kind.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/status.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/status.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CanonicalCode = void 0;\n/**\n * An enumeration of canonical status codes.\n */\nvar CanonicalCode;\n(function (CanonicalCode) {\n    /**\n     * Not an error; returned on success\n     */\n    CanonicalCode[CanonicalCode[\"OK\"] = 0] = \"OK\";\n    /**\n     * The operation was cancelled (typically by the caller).\n     */\n    CanonicalCode[CanonicalCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /**\n     * Unknown error.  An example of where this error may be returned is\n     * if a status value received from another address space belongs to\n     * an error-space that is not known in this address space.  Also\n     * errors raised by APIs that do not return enough error information\n     * may be converted to this error.\n     */\n    CanonicalCode[CanonicalCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /**\n     * Client specified an invalid argument.  Note that this differs\n     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n     * that are problematic regardless of the state of the system\n     * (e.g., a malformed file name).\n     */\n    CanonicalCode[CanonicalCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /**\n     * Deadline expired before operation could complete.  For operations\n     * that change the state of the system, this error may be returned\n     * even if the operation has completed successfully.  For example, a\n     * successful response from a server could have been delayed long\n     * enough for the deadline to expire.\n     */\n    CanonicalCode[CanonicalCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /**\n     * Some requested entity (e.g., file or directory) was not found.\n     */\n    CanonicalCode[CanonicalCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /**\n     * Some entity that we attempted to create (e.g., file or directory)\n     * already exists.\n     */\n    CanonicalCode[CanonicalCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /**\n     * The caller does not have permission to execute the specified\n     * operation.  PERMISSION_DENIED must not be used for rejections\n     * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n     * instead for those errors).  PERMISSION_DENIED must not be\n     * used if the caller can not be identified (use UNAUTHENTICATED\n     * instead for those errors).\n     */\n    CanonicalCode[CanonicalCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or\n     * perhaps the entire file system is out of space.\n     */\n    CanonicalCode[CanonicalCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /**\n     * Operation was rejected because the system is not in a state\n     * required for the operation's execution.  For example, directory\n     * to be deleted may be non-empty, an rmdir operation is applied to\n     * a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *\n     *  - Use UNAVAILABLE if the client can retry just the failing call.\n     *  - Use ABORTED if the client should retry at a higher-level\n     *    (e.g., restarting a read-modify-write sequence).\n     *  - Use FAILED_PRECONDITION if the client should not retry until\n     *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n     *    fails because the directory is non-empty, FAILED_PRECONDITION\n     *    should be returned since the client should not retry unless\n     *    they have first fixed up the directory by deleting files from it.\n     *  - Use FAILED_PRECONDITION if the client performs conditional\n     *    REST Get/Update/Delete on a resource and the resource on the\n     *    server does not match the condition. E.g., conflicting\n     *    read-modify-write on the same resource.\n     */\n    CanonicalCode[CanonicalCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /**\n     * The operation was aborted, typically due to a concurrency issue\n     * like sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION,\n     * ABORTED, and UNAVAILABLE.\n     */\n    CanonicalCode[CanonicalCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    /**\n     * Operation was attempted past the valid range.  E.g., seeking or\n     * reading past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n     * be fixed if the system state changes. For example, a 32-bit file\n     * system will generate INVALID_ARGUMENT if asked to read at an\n     * offset that is not in the range [0,2^32-1], but it will generate\n     * OUT_OF_RANGE if asked to read from an offset past the current\n     * file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n     * error) when it applies so that callers who are iterating through\n     * a space can easily look for an OUT_OF_RANGE error to detect when\n     * they are done.\n     */\n    CanonicalCode[CanonicalCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /**\n     * Operation is not implemented or not supported/enabled in this service.\n     */\n    CanonicalCode[CanonicalCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /**\n     * Internal errors.  Means some invariants expected by underlying\n     * system has been broken.  If you see one of these errors,\n     * something is very broken.\n     */\n    CanonicalCode[CanonicalCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /**\n     * The service is currently unavailable.  This is a most likely a\n     * transient condition and may be corrected by retrying with\n     * a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION,\n     * ABORTED, and UNAVAILABLE.\n     */\n    CanonicalCode[CanonicalCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    CanonicalCode[CanonicalCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    CanonicalCode[CanonicalCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(CanonicalCode = exports.CanonicalCode || (exports.CanonicalCode = {}));\n//# sourceMappingURL=status.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/status.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceFlags = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_state.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_state.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trace_state.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/trace_state.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer_provider.js.map\n\n//# sourceURL=webpack:///./node_modules/@opentelemetry/core/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js?");

/***/ }),

/***/ "./src/Logger.ts":
/*!***********************!*\
  !*** ./src/Logger.ts ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SimpleLogger; });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/src/index.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/src/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api */ \"./src/api/index.ts\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\nvar SimpleLogger = /*#__PURE__*/function () {\n  function SimpleLogger() {\n    _classCallCheck(this, SimpleLogger);\n\n    Object.defineProperty(this, \"bufferSize\", {\n      enumerable: true,\n      writable: true,\n      value: 10\n    });\n    Object.defineProperty(this, \"bufferCount\", {\n      enumerable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"eventBuffer\", {\n      enumerable: true,\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, \"exporterMap\", {\n      enumerable: true,\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, \"samplerMap\", {\n      enumerable: true,\n      writable: true,\n      value: new Map()\n    });\n  }\n\n  _createClass(SimpleLogger, [{\n    key: \"startSpan\",\n    value: function startSpan(name, options) {\n      var opts = this.span ? _objectSpread(_objectSpread({}, options), {}, {\n        parent: this.span.context\n      }) : options;\n      var span = _api__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tracer.createSpan(name, opts);\n      var logger = new SimpleLogger();\n      logger.span = span;\n      logger.exporterMap = this.exporterMap;\n      logger.samplerMap = this.samplerMap;\n      logger.bufferSize = this.bufferSize;\n      logger.count(\"\".concat(span.name, \".start\"));\n      return logger;\n    }\n  }, {\n    key: \"endSpan\",\n    value: function endSpan(evt) {\n      if (!this.span) {\n        this.error(new Error('logger.endSpan must call after logger.startSpan'));\n        return;\n      }\n\n      var endTime = evt && evt.time;\n      var endTimestamp = Date.now();\n\n      if (endTime && Object(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__[\"isTimeInputHrTime\"])(endTime)) {\n        endTimestamp = Object(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__[\"hrTimeToMilliseconds\"])(endTime);\n      }\n\n      if (evt && evt.status) {\n        this.error(new Error(\"\".concat(this.span.name, \" failed with status \").concat(evt.status)), evt);\n      }\n\n      this.timing(\"\".concat(this.span.name, \".end\"), endTimestamp - this.span.startTime, evt);\n      this.count(\"\".concat(this.span.name, \".end\"), evt);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message, evt) {\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Debug, message, _objectSpread({}, evt));\n    }\n  }, {\n    key: \"info\",\n    value: function info(message, evt) {\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Info, message, _objectSpread({}, evt));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message, evt) {\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Warn, message, _objectSpread({}, evt));\n    }\n  }, {\n    key: \"error\",\n    value: function error(_error, evt) {\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Error, _error, _objectSpread({}, evt));\n    }\n  }, {\n    key: \"store\",\n    value: function store(evt) {\n      evt.type = _api__WEBPACK_IMPORTED_MODULE_2__[\"EventType\"].Store;\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Info, '', _objectSpread({}, evt));\n    }\n  }, {\n    key: \"count\",\n    value: function count(name, evt) {\n      var e = _objectSpread({}, evt);\n\n      e.name = name;\n      e.data = e.data || 1;\n      e.type = _api__WEBPACK_IMPORTED_MODULE_2__[\"EventType\"].Count;\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Info, \"count \".concat(name, \" \").concat(e.data, \" times\"), e);\n    }\n    /**\n     *\n     * @param name the name of timing event\n     * @param duration ms\n     * @param evt other event info\n     */\n\n  }, {\n    key: \"timing\",\n    value: function timing(name, duration, evt) {\n      var e = _objectSpread({}, evt);\n\n      e.name = name;\n      e.data = duration;\n      e.type = _api__WEBPACK_IMPORTED_MODULE_2__[\"EventType\"].Timing;\n      this.innerLog(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"].Info, \"timing \".concat(name, \" \").concat(duration, \"ms\"), e);\n    }\n  }, {\n    key: \"setExporter\",\n    value: function setExporter(level, exportor) {\n      var _this = this;\n\n      Object.keys(_api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"]).forEach(function (l) {\n        var levelValue = _api__WEBPACK_IMPORTED_MODULE_2__[\"EventLevel\"][l]; // set EventLevel.Info exporter, will alse set all levels which greater than EventLevel.Info;\n\n        if (typeof levelValue === 'number' && levelValue >= level) {\n          var arr = _this.exporterMap.get(levelValue) || [];\n          arr.push(exportor);\n\n          _this.exporterMap.set(levelValue, arr);\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"setSampler\",\n    value: function setSampler(level, sampler) {\n      this.samplerMap.set(level, sampler);\n      return this;\n    }\n  }, {\n    key: \"setBufferSize\",\n    value: function setBufferSize(size) {\n      this.bufferSize = size;\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this2 = this;\n\n      // 1. if exporters exist, export all events\n      this.eventBuffer.forEach(function (evts, key) {\n        _this2[\"export\"](key, evts);\n      }); // 2. reset eventBuffer anyway\n\n      this.eventBuffer = new Map();\n      this.bufferCount = 0;\n      return;\n    }\n  }, {\n    key: \"innerLog\",\n    value: function innerLog(level, message, evt) {\n      evt.level = level;\n\n      if (typeof message === 'string' && message) {\n        evt.message = message;\n      } else if (message instanceof Error) {\n        evt.error = message;\n        evt.message = message.message;\n      }\n\n      if (!evt.status) {\n        evt.status = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__[\"CanonicalCode\"].OK;\n      }\n\n      if (!evt.time) {\n        evt.time = Date.now();\n      }\n\n      try {\n        var tracer = _api__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tracer.toJSON();\n        var span = this.span || {};\n        evt.attributes = _objectSpread(_objectSpread(_objectSpread({}, evt.attributes), span.attributes), {}, {\n          spanId: span.context && span.context.spanId,\n          spanKind: span.kind,\n          spanName: span.name,\n          traceId: span.context && span.context.traceId,\n          tracerModule: tracer.module,\n          tracerModuleVersion: tracer.moduleVersion,\n          tracerName: tracer.name,\n          tracerVersion: tracer.version\n        });\n        var sampler = this.samplerMap.get(level);\n\n        if (sampler && !sampler.shouldSample(span.context)) {\n          return;\n        }\n\n        if (this.bufferSize <= 1) {\n          this[\"export\"](evt.level, [evt]);\n        } else {\n          var evts = this.eventBuffer.get(evt.level) || [];\n          evts.push(evt);\n          this.bufferCount++;\n          this.eventBuffer.set(evt.level, evts);\n\n          if (this.bufferCount >= this.bufferSize) {\n            this.flush();\n          }\n        }\n      } catch (err) {\n        // TODO: report error to some exporter\n\n        /* tslint:disable no-console */\n        console.error('Failed export events with error', err);\n      }\n    }\n  }, {\n    key: \"export\",\n    value: function _export(level, evts) {\n      try {\n        var exporters = this.exporterMap.get(level);\n\n        if (exporters) {\n          exporters.forEach(function (exporter) {\n            exporter[\"export\"](evts, function (result) {\n              if (result !== _api__WEBPACK_IMPORTED_MODULE_2__[\"ExportResult\"].SUCCESS) {\n                // TODO: report error to some exporter\n\n                /* tslint:disable no-console */\n                console.error(\"Failed export event with \".concat(result === _api__WEBPACK_IMPORTED_MODULE_2__[\"ExportResult\"].FAILED_NOT_RETRYABLE ? 'no' : '', \" retry\"));\n              }\n            });\n          });\n        }\n      } catch (err) {\n        // TODO: report error to some exporter\n\n        /* tslint:disable no-console */\n        console.error('Failed export events with error', err);\n      }\n    }\n  }]);\n\n  return SimpleLogger;\n}();\n\n\n\n//# sourceURL=webpack:///./src/Logger.ts?");

/***/ }),

/***/ "./src/Tracer.ts":
/*!***********************!*\
  !*** ./src/Tracer.ts ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SimpleTracer; });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/src/index.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/src/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nfunction createSpanId(parentSpanId) {\n  return parentSpanId ? \"\".concat(parentSpanId, \".1\") : '1';\n}\n\nfunction createTraceId() {\n  return Math.random().toString(32).substring(2) + Math.random().toString(32).substring(2);\n}\n\nvar SimpleTracer = /*#__PURE__*/function () {\n  function SimpleTracer(config) {\n    _classCallCheck(this, SimpleTracer);\n\n    this.name = config.name;\n    this.version = config.version;\n    this.module = 'acelogger';\n    this.moduleVersion = '0.0.1';\n    this.attributes = config.attributes || {};\n    this.startTime = config.startTime && Object(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__[\"isTimeInputHrTime\"])(config.startTime) ? Object(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__[\"hrTimeToMilliseconds\"])(config.startTime) : Date.now();\n  }\n\n  _createClass(SimpleTracer, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        attributes: this.attributes,\n        module: this.module,\n        moduleVersion: this.moduleVersion,\n        name: this.name,\n        startTime: this.startTime,\n        version: this.version\n      };\n    }\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(attrs) {\n      Object.assign(this.attributes, attrs);\n    }\n  }, {\n    key: \"createSpanContext\",\n    value: function createSpanContext(ctx) {\n      var c = _objectSpread({}, ctx);\n\n      return {\n        isRemote: c.isRemote,\n        spanId: createSpanId(c.spanId),\n        traceFlags: c.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__[\"TraceFlags\"].NONE,\n        traceId: c.traceId || createTraceId(),\n        traceState: c.traceState\n      };\n    }\n  }, {\n    key: \"createSpan\",\n    value: function createSpan(name, options) {\n      var opt = options || {};\n      return {\n        attributes: opt.attributes,\n        context: this.createSpanContext(opt.parent),\n        endTime: 0,\n        kind: opt.kind || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__[\"SpanKind\"].INTERNAL,\n        name: name,\n        parentContext: opt.parent,\n        startTime: Date.now()\n      };\n    }\n  }]);\n\n  return SimpleTracer;\n}();\n\n\n\n//# sourceURL=webpack:///./src/Tracer.ts?");

/***/ }),

/***/ "./src/api/Logger.ts":
/*!***************************!*\
  !*** ./src/api/Logger.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./src/api/Logger.ts?");

/***/ }),

/***/ "./src/api/LoggerEvent.ts":
/*!********************************!*\
  !*** ./src/api/LoggerEvent.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./src/api/LoggerEvent.ts?");

/***/ }),

/***/ "./src/api/LoggerEventExporter.ts":
/*!****************************************!*\
  !*** ./src/api/LoggerEventExporter.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./src/api/LoggerEventExporter.ts?");

/***/ }),

/***/ "./src/api/Tracer.ts":
/*!***************************!*\
  !*** ./src/api/Tracer.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./src/api/Tracer.ts?");

/***/ }),

/***/ "./src/api/consts.ts":
/*!***************************!*\
  !*** ./src/api/consts.ts ***!
  \***************************/
/*! exports provided: EventType, EventLevel, ExportResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventType\", function() { return EventType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventLevel\", function() { return EventLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExportResult\", function() { return ExportResult; });\nvar EventType;\n\n(function (EventType) {\n  EventType[\"Log\"] = \"log\";\n  EventType[\"Store\"] = \"store\";\n  EventType[\"Count\"] = \"count\";\n  EventType[\"Timing\"] = \"timing\";\n  EventType[\"Start\"] = \"start\";\n  EventType[\"End\"] = \"end\";\n})(EventType || (EventType = {}));\n\nvar EventLevel;\n\n(function (EventLevel) {\n  EventLevel[EventLevel[\"Debug\"] = 0] = \"Debug\";\n  EventLevel[EventLevel[\"Info\"] = 1] = \"Info\";\n  EventLevel[EventLevel[\"Warn\"] = 2] = \"Warn\";\n  EventLevel[EventLevel[\"Error\"] = 3] = \"Error\";\n})(EventLevel || (EventLevel = {}));\n\nvar ExportResult;\n\n(function (ExportResult) {\n  ExportResult[ExportResult[\"SUCCESS\"] = 0] = \"SUCCESS\";\n  ExportResult[ExportResult[\"FAILED_NOT_RETRYABLE\"] = 1] = \"FAILED_NOT_RETRYABLE\";\n  ExportResult[ExportResult[\"FAILED_RETRYABLE\"] = 2] = \"FAILED_RETRYABLE\";\n})(ExportResult || (ExportResult = {}));\n\n//# sourceURL=webpack:///./src/api/consts.ts?");

/***/ }),

/***/ "./src/api/index.ts":
/*!**************************!*\
  !*** ./src/api/index.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Api\", function() { return Api; });\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tracer */ \"./src/api/Tracer.ts\");\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Tracer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Tracer__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"Api\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Tracer__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Logger */ \"./src/api/Logger.ts\");\n/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Logger__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Logger__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"Api\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Logger__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _LoggerEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LoggerEvent */ \"./src/api/LoggerEvent.ts\");\n/* harmony import */ var _LoggerEvent__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_LoggerEvent__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _LoggerEvent__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"Api\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _LoggerEvent__WEBPACK_IMPORTED_MODULE_2__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _LoggerEventExporter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LoggerEventExporter */ \"./src/api/LoggerEventExporter.ts\");\n/* harmony import */ var _LoggerEventExporter__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_LoggerEventExporter__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _LoggerEventExporter__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"Api\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _LoggerEventExporter__WEBPACK_IMPORTED_MODULE_3__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./consts */ \"./src/api/consts.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EventType\", function() { return _consts__WEBPACK_IMPORTED_MODULE_4__[\"EventType\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EventLevel\", function() { return _consts__WEBPACK_IMPORTED_MODULE_4__[\"EventLevel\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ExportResult\", function() { return _consts__WEBPACK_IMPORTED_MODULE_4__[\"ExportResult\"]; });\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Api = /*#__PURE__*/function () {\n  function Api() {\n    _classCallCheck(this, Api);\n\n    Object.defineProperty(this, \"registries\", {\n      enumerable: true,\n      writable: true,\n      value: new Map()\n    });\n  }\n\n  _createClass(Api, [{\n    key: \"setLogger\",\n    value: function setLogger(logger) {\n      this.registries.set('logger', logger);\n    }\n  }, {\n    key: \"setTracer\",\n    value: function setTracer(tracer) {\n      this.registries.set('tracer', tracer);\n    }\n  }, {\n    key: \"logger\",\n    get: function get() {\n      return this.registries.get('logger');\n    }\n  }, {\n    key: \"tracer\",\n    get: function get() {\n      return this.registries.get('tracer');\n    }\n  }]);\n\n  return Api;\n}();\n/* harmony default export */ __webpack_exports__[\"default\"] = (new Api());\n\n//# sourceURL=webpack:///./src/api/index.ts?");

/***/ }),

/***/ "./src/consts/Tags.ts":
/*!****************************!*\
  !*** ./src/consts/Tags.ts ***!
  \****************************/
/*! exports provided: TAG_USER_ID, TAG_USER_NAME, TAG_USER_OS_NAME, TAG_USER_OS_VERSION, TAG_USER_PLATFORM_NAME, TAG_USER_PLATFORM_VERSION, TAG_USER_DEVICE, TAG_USER_LOCALE, TAG_USER_CITY, TAG_USER_COUNTRY, TAG_USER_SCREEN_DPR, TAG_USER_SCREEN_RESOLUTION, TAG_USER_NET_TYPE, TAG_USER_NET_VENDOR, TAG_IDC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_ID\", function() { return TAG_USER_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NAME\", function() { return TAG_USER_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_OS_NAME\", function() { return TAG_USER_OS_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_OS_VERSION\", function() { return TAG_USER_OS_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_PLATFORM_NAME\", function() { return TAG_USER_PLATFORM_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_PLATFORM_VERSION\", function() { return TAG_USER_PLATFORM_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_DEVICE\", function() { return TAG_USER_DEVICE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_LOCALE\", function() { return TAG_USER_LOCALE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_CITY\", function() { return TAG_USER_CITY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_COUNTRY\", function() { return TAG_USER_COUNTRY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_SCREEN_DPR\", function() { return TAG_USER_SCREEN_DPR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_SCREEN_RESOLUTION\", function() { return TAG_USER_SCREEN_RESOLUTION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NET_TYPE\", function() { return TAG_USER_NET_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NET_VENDOR\", function() { return TAG_USER_NET_VENDOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TAG_IDC\", function() { return TAG_IDC; });\n/**\n * 用户的 Tags 常量\n */\nvar TAG_USER_ID = 'user.id';\nvar TAG_USER_NAME = 'user.name';\nvar TAG_USER_OS_NAME = 'user.os.name';\nvar TAG_USER_OS_VERSION = 'user.os.version'; // like chrome, safari, wechat, lark, dingding\n\nvar TAG_USER_PLATFORM_NAME = 'user.platform.name';\nvar TAG_USER_PLATFORM_VERSION = 'user.platform.version'; // iPhone/Huawei/Samsung etc\n\nvar TAG_USER_DEVICE = 'user.device'; // zh-CN, en-US etc\n\nvar TAG_USER_LOCALE = 'user.locale';\nvar TAG_USER_CITY = 'user.city';\nvar TAG_USER_COUNTRY = 'user.country'; // devicePixelRatio\n\nvar TAG_USER_SCREEN_DPR = 'user.screen.dpr'; // 屏幕分辨率， 1024*768\n\nvar TAG_USER_SCREEN_RESOLUTION = 'user.screen.resolution'; // net environment, maybe wifi/3g/4g/5g\n\nvar TAG_USER_NET_TYPE = 'user.net.type'; // 网络厂商，联通/移动\n\nvar TAG_USER_NET_VENDOR = 'user.net.vendor';\n/**\n * 服务器环境的 Tags 常量\n */\n// 数据中心机房分布\n\nvar TAG_IDC = 'env.idc';\n\n//# sourceURL=webpack:///./src/consts/Tags.ts?");

/***/ }),

/***/ "./src/consts/index.ts":
/*!*****************************!*\
  !*** ./src/consts/index.ts ***!
  \*****************************/
/*! exports provided: TAG_USER_ID, TAG_USER_NAME, TAG_USER_OS_NAME, TAG_USER_OS_VERSION, TAG_USER_PLATFORM_NAME, TAG_USER_PLATFORM_VERSION, TAG_USER_DEVICE, TAG_USER_LOCALE, TAG_USER_CITY, TAG_USER_COUNTRY, TAG_USER_SCREEN_DPR, TAG_USER_SCREEN_RESOLUTION, TAG_USER_NET_TYPE, TAG_USER_NET_VENDOR, TAG_IDC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Tags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tags */ \"./src/consts/Tags.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_ID\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_ID\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NAME\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_OS_NAME\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_OS_NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_OS_VERSION\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_OS_VERSION\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_PLATFORM_NAME\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_PLATFORM_NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_PLATFORM_VERSION\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_PLATFORM_VERSION\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_DEVICE\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_DEVICE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_LOCALE\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_LOCALE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_CITY\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_CITY\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_COUNTRY\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_COUNTRY\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_SCREEN_DPR\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_SCREEN_DPR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_SCREEN_RESOLUTION\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_SCREEN_RESOLUTION\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NET_TYPE\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_NET_TYPE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NET_VENDOR\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_USER_NET_VENDOR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_IDC\", function() { return _Tags__WEBPACK_IMPORTED_MODULE_0__[\"TAG_IDC\"]; });\n\n\n\n//# sourceURL=webpack:///./src/consts/index.ts?");

/***/ }),

/***/ "./src/exporters/ConsoleExporterNode.ts":
/*!**********************************************!*\
  !*** ./src/exporters/ConsoleExporterNode.ts ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ConsoleExporterNode; });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/src/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./console */ \"./src/exporters/console.ts\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar ConsoleExporterNode = /*#__PURE__*/function () {\n  function ConsoleExporterNode() {\n    _classCallCheck(this, ConsoleExporterNode);\n\n    Object.defineProperty(this, \"stoped\", {\n      enumerable: true,\n      writable: true,\n      value: false\n    });\n  }\n\n  _createClass(ConsoleExporterNode, [{\n    key: \"export\",\n    value: function _export(evts, cb) {\n      if (this.stoped) {\n        return;\n      }\n\n      evts.forEach(_console__WEBPACK_IMPORTED_MODULE_1__[\"adaptToNodeConsole\"]);\n\n      if (cb) {\n        cb(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__[\"ExportResult\"].SUCCESS);\n      }\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {\n      this.stoped = true;\n    }\n  }]);\n\n  return ConsoleExporterNode;\n}();\n\n\n\n//# sourceURL=webpack:///./src/exporters/ConsoleExporterNode.ts?");

/***/ }),

/***/ "./src/exporters/ConsoleExporterWeb.ts":
/*!*********************************************!*\
  !*** ./src/exporters/ConsoleExporterWeb.ts ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ConsoleExporterNode; });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/src/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./console */ \"./src/exporters/console.ts\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar ConsoleExporterNode = /*#__PURE__*/function () {\n  function ConsoleExporterNode() {\n    _classCallCheck(this, ConsoleExporterNode);\n\n    Object.defineProperty(this, \"stoped\", {\n      enumerable: true,\n      writable: true,\n      value: false\n    });\n  }\n\n  _createClass(ConsoleExporterNode, [{\n    key: \"export\",\n    value: function _export(evts, cb) {\n      if (this.stoped) {\n        return;\n      }\n\n      evts.forEach(_console__WEBPACK_IMPORTED_MODULE_1__[\"adaptToBrowserConsole\"]);\n\n      if (cb) {\n        cb(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__[\"ExportResult\"].SUCCESS);\n      }\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {\n      this.stoped = true;\n    }\n  }]);\n\n  return ConsoleExporterNode;\n}();\n\n\n\n//# sourceURL=webpack:///./src/exporters/ConsoleExporterWeb.ts?");

/***/ }),

/***/ "./src/exporters/console.ts":
/*!**********************************!*\
  !*** ./src/exporters/console.ts ***!
  \**********************************/
/*! exports provided: EventLevelTitleMap, formatBrowserConsole, formatNodeConsole, adaptToJSConsole, adaptToBrowserConsole, adaptToNodeConsole */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventLevelTitleMap\", function() { return EventLevelTitleMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatBrowserConsole\", function() { return formatBrowserConsole; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatNodeConsole\", function() { return formatNodeConsole; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adaptToJSConsole\", function() { return adaptToJSConsole; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adaptToBrowserConsole\", function() { return adaptToBrowserConsole; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adaptToNodeConsole\", function() { return adaptToNodeConsole; });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api */ \"./src/api/index.ts\");\nvar _EventLevelTitleMap;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction formatSection(evt) {\n  var attrs = evt.attributes || {};\n  var spanName = attrs.spanName ? '|' + attrs.spanName : '';\n  var spanId = attrs.spanId ? '|' + attrs.spanId : '';\n  return \"[\".concat(attrs.tracerName).concat(spanId).concat(spanName, \"]\");\n}\n\nvar EventLevelTitleMap = (_EventLevelTitleMap = {}, _defineProperty(_EventLevelTitleMap, _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Debug, 'DEBUG'), _defineProperty(_EventLevelTitleMap, _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Info, 'INFO'), _defineProperty(_EventLevelTitleMap, _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Warn, 'WARN'), _defineProperty(_EventLevelTitleMap, _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Error, 'ERROR'), _EventLevelTitleMap);\n/**\n * format evt to be a colorful output in browser console\n * @param evt\n */\n\nfunction formatBrowserConsole(evt) {\n  var statusColor = evt.level < _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Warn ? '#00E676' : '#FF7043';\n  return [\"%c\".concat(formatSection(evt), \" \").concat(EventLevelTitleMap[evt.level]), \"font-weight: bold; color: \".concat(statusColor, \";\"), \"\\\"\".concat(evt.message || 'no message', \"\\\"\"), evt];\n}\n/**\n * format evt to be a colorful output in node console\n * @param evt\n */\n\nfunction formatNodeConsole(evt) {\n  var statusColor = evt.level < _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Warn ? '32' : '31';\n  return [formatSection(evt), \"\\x1B[\".concat(statusColor, \"m\").concat(EventLevelTitleMap[evt.level], \"\\x1B[0m\"), \"\\\"\".concat(evt.message || 'no message', \"\\\"\"), evt];\n}\n/* tslint:disable: no-console */\n\nfunction adaptToJSConsole(evt, format) {\n  var _console2, _console3, _console4, _console5;\n\n  if (evt.level >= _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Error) {\n    var _console;\n\n    // 这里不使用 console.error() 是因为像 sentry\n    // 等工具会拦截该方法，从而导致重复上报\n    (_console = console).warn.apply(_console, _toConsumableArray(format(evt)));\n\n    return;\n  }\n\n  switch (evt.level) {\n    case _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Debug:\n      (_console2 = console).debug.apply(_console2, _toConsumableArray(format(evt)));\n\n      break;\n\n    case _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Info:\n      (_console3 = console).info.apply(_console3, _toConsumableArray(format(evt)));\n\n      break;\n\n    case _api__WEBPACK_IMPORTED_MODULE_0__[\"EventLevel\"].Warn:\n      (_console4 = console).warn.apply(_console4, _toConsumableArray(format(evt)));\n\n      break;\n\n    default:\n      (_console5 = console).info.apply(_console5, _toConsumableArray(format(evt)));\n\n      break;\n  }\n}\n/* tslint:enable */\n\nfunction adaptToBrowserConsole(evt) {\n  adaptToJSConsole(evt, formatBrowserConsole);\n}\nfunction adaptToNodeConsole(evt) {\n  adaptToJSConsole(evt, formatNodeConsole);\n}\n\n//# sourceURL=webpack:///./src/exporters/console.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"./src/api/index.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"api\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tracer */ \"./src/Tracer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Tracer\", function() { return _Tracer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Logger */ \"./src/Logger.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Logger\", function() { return _Logger__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _exporters_ConsoleExporterWeb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./exporters/ConsoleExporterWeb */ \"./src/exporters/ConsoleExporterWeb.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConsoleExporterWeb\", function() { return _exporters_ConsoleExporterWeb__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _exporters_ConsoleExporterNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exporters/ConsoleExporterNode */ \"./src/exporters/ConsoleExporterNode.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConsoleExporterNode\", function() { return _exporters_ConsoleExporterNode__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _api__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"ConsoleExporterWeb\",\"ConsoleExporterNode\",\"Logger\",\"Tracer\",\"api\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _api__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./consts */ \"./src/consts/index.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_ID\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_ID\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NAME\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_OS_NAME\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_OS_NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_OS_VERSION\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_OS_VERSION\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_PLATFORM_NAME\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_PLATFORM_NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_PLATFORM_VERSION\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_PLATFORM_VERSION\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_DEVICE\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_DEVICE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_LOCALE\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_LOCALE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_CITY\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_CITY\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_COUNTRY\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_COUNTRY\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_SCREEN_DPR\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_SCREEN_DPR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_SCREEN_RESOLUTION\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_SCREEN_RESOLUTION\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NET_TYPE\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_NET_TYPE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_USER_NET_VENDOR\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_USER_NET_VENDOR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TAG_IDC\", function() { return _consts__WEBPACK_IMPORTED_MODULE_5__[\"TAG_IDC\"]; });\n\n\n\n\n\n\n\n\n_api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setLogger(new _Logger__WEBPACK_IMPORTED_MODULE_2__[\"default\"]());\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ });